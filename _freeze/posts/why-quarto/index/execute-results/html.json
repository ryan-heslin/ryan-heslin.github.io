{
  "hash": "cf05a4af09dd72d1a62832a2398003c7",
  "result": {
    "markdown": "---\ntitle: \"Why Quarto?\"\nauthor: \"Ryan Heslin\"\ndate: \"2023-07-15\"\ncategories: [\"R\"]\nurlcolor: \"blue\"\n---\n\n\nWhen I started planning this blog, I initially intended to use [R Markdown](https://rmarkdown.rstudio.com/) with [Blogdown](https://bookdown.org/yihui/blogdown/). But right \nbefore I committed, I learned about [Quarto](https://quarto.org/), a \nnew Markdown variant with several new features. I decided to go with Quarto, \nand it proved the right decision. This post is about how Quarto extends R Markdown's \nalready formidable capabilities to produce all kinds of documents.\n\n# R Markdown\n\nR Markdown is a file type based on [Markdown](https://en.wikipedia.org/wiki/Markdown). \nIt is designed for writing documents that combine \"chunks\" of R code with plain text. \nAn R Markdown document can be \"rendered\" into several different types \nof output, most commonly `.html` or `.pdf`. Rendering executes R code contained \nin chunks and displays the outputs in the resulting document alongside text.\n\nR Markdown is well suited for typical data science work products. When writing \na report or article, it's easy to combine code with prose that explains what it \ndoes. You write the document like this:\n\nThis important plot shows that two<br/>\nprincipal components capture almost<br/>\nall of the variance within `mtcars`<br/>\n\\`\\`\\`{r}<br/>\nplot(princomp(mtcars))<br/>\n\\`\\`\\`<br/>\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nand the output is shown when it's rendered.\n\nThe format also renders [LaTeX](https://www.latex-project.org/), which means \nyou can use all kinds of math symbols, like this set identity. \n\n$$\n|A \\cup B| = |A| + |B| - A \\cap B|\n$$\n\nI used R Markdown all the time in grad school. I learned the format before \nmy first semester began, and I used it from the start to make reports to my assistantship supervisor.\nI became more familiar with it after changing to a data science degree.\nSince the data science department at my school mostly used R, it was the required \nformat for most assignments.\nIts LaTeX capabilities also came in handy for linear algebra \nhomework. \n\nBut a few pain points emerged over time.\nThere was no built-in shell command to render a document from the terminal; \nyou had to run `R -e 'rmarkdown::render(\"thefile.Rmd\")'` or similar. \nMany people used R Markdown to write blogs, but no built-in support existed, \nso most relied on external packages like Blogdown. Most obviously, \nit was fundamentally `_R_` markdown. While the format can render an impressive \nnumber of non-R languages, like [SQL](https://en.wikipedia.org/wiki/SQL) or [Bash](https://en.wikipedia.org/wiki/Bash_(Unix_shell)), it\nwas designed and intended for R, not other ecosystems. If you want to \nrender an R Markdown file as a [Jupyter notebook](https://jupyter.org/), \nyou'll need to use a third-party tool.\n\n# Drawn and Quartoed\n\nQuarto does all these things and more. It features a \ncommand-line interface that can render files, preview outputs, \ncreate projects, and more. It supports Jupyter notebook outputs and \noffers a cleaner way to set chunk options than R Markdown.\nMost importantly for my use case, Quarto was designed to support \nblog editing. [The docs even have a step-by-step guide](https://quarto.org/docs/websites/website-blog.html).  \n\nAll that aside, Quarto also supports the usual R Markdown features. You can \nrun code from various languages, customize chunks to your heart's content, \nand use LaTeX freely.\n\nThese facts make Quarto ideal for a blog like this. The workflow is simple. \nWhen I want to write a new post, I change directory to the project root and \ncreate `posts/important-content/index.qmd`, \nwhere `important-content` is the post title. (But I repeat myself, for all \nmy content is important). Then I write `index.qmd`, the file that will \nbe turned into an HTML document containing the post text. Once done, \nI use `quarto render posts/important-content` to create the HTML output, \nthen `quarto preview` to find out how it would look once uploaded. I make \nany needed tweaks, then repeat the process as needed. Once satisfied, I \n`git commit` and push to the repository where the blog lives.\n\nI'm sure I'll discover some pain points with Quarto eventually, but so far \nit's been a smooth experience. And when I do, I'm pretty confident they'll \nbe resolved with the successor file format.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}