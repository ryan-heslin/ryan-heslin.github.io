{
  "hash": "51a17ec04d9c0d3e0782e1b174395e39",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code 2023 Day 9\"\nauthor: \"Ryan Heslin\"\ndate: \"2023-12-9\"\ncategories: [\"Advent of Code\"]\nurlcolor: \"blue\"\n---\n\n\nTo my surprise, the weekend difficulty spike failed to materialize. Today's puzzle \njust requires you to compute successive differences of vectors and add the last term \nof each iteration. (I mean the operation that takes subtracts from every element the \nprevious one, turning `(1, 3, 6)` into `(2, 3)`). Part two requires the process in \nreverse on the first element of each iteration. \n\nAfter some tinkering, I got both on a single pass:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .source .cell-code}\nimpute <- function(sequence) {\n  modulus <- 1\n  part1 <- sequence[[length(sequence)]]\n  part2 <- sequence[[1]]\n\n  while (any(sequence)) {\n    # To avoid numeric(0)\n    sequence <- diff(sequence)\n    part1 <- part1 + sequence[[length(sequence)]]\n    part2 <- part2 + (sequence[[1]] * (1 - (2 * modulus)))\n    modulus <- (modulus + 1) %% 2\n  }\n  c(part1, part2)\n}\n```\n:::\n\n\n\nI felt pretty slick until I learned the \"slick\" way to solve the problem is \nto use [Lagrange interpolation](https://en.wikipedia.org/wiki/Lagrange_polynomial).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}