{
  "hash": "85055a0ed74804f6f49cfef0d9fffccb",
  "result": {
    "markdown": "---\ntitle: \"Advent of Code 2023 Day 14\"\ndate: \"2023-12-14\"\nfreeze: auto\ncategories: [\"Advent of Code\"]\nurlcolor: \"blue\"\n---\n\nSo much for the breather. Today asks you to simulate the motion of round rocks \nin a grid. Each round rock should move upward until it hits another rock or the \nedge of the space. Part 1 is a little fiddly, but simple enough to solve using \na dict of complex numbers to represent coordinates, with an enum type for the \ndifferent types of rock.\n\nPart 2 asks you to simulate a full \"cycle\" of rock movements - up, left, down, then \nright - 1000000000 times. When Advent of Code asks you to simulate something a billion \ntimes, it's really asking you to simulate a few times until you detect a cycle, \nthen do the arithmetic to determine the outcome after a billion iterations. \nI messed up some of the fiddly math at first, but got it eventually:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef total_load(grid, offset):\n    grid = dict(grid)\n    rounded = Coordinate.ROUND\n    closed = {rounded, Coordinate.CUBE}\n    load = 0\n    keys = {\n        1j: lambda x: (-x.imag, x.real),\n        -1: lambda x: (x.real, x.imag),\n        -1j: lambda x: (x.imag, x.real),\n        1: lambda x: (-x.real, x.imag),\n    }\n\n    for coord in sorted(grid.keys(), key=keys[offset]):\n        el = grid[coord]\n\n        if el == rounded:\n            current = coord\n            grid[current] = Coordinate.OPEN\n            while True:\n                new = current + offset\n                if new not in grid or grid[new] in closed:\n                    grid[current] = rounded\n                    load += current.imag + 1\n                    break\n                current = new\n\n    return grid, int(load)\n\n\ndef predict(grid):\n    results = OrderedDict()\n    offsets = (1j, -1, -1j, 1)\n    load = 0\n\n    while True:\n        for offset in offsets:\n            grid, load = total_load(grid, offset)\n        hash = frozenset(zip(grid.keys(), grid.values()))\n        if hash in results:\n            print(load)\n            return results, tuple(i for i, k in enumerate(results.keys()) if k == hash)\n        results[hash] = load\n```\n:::\n\n\n[2022 day 17](https://adventofcode.com/2022/day/17) was a harder version of this \npuzzle. And day 17 is in 3 days - on a weekend, no less...\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}