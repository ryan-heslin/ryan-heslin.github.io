{
  "hash": "1362939be83fecd0af98279ab1416fb1",
  "result": {
    "markdown": "---\ntitle: \"The Unexpected Pleasures of Naive Code\"\nauthor: \"Ryan Heslin\"\ndate: \"2023-07-13\"\ncategories: [\"miscellany\"]\nurlcolor: \"blue\"\n---\n\n\nAs a moderator of a technical Discord server, I've encountered \na lot of \"naive\" code. In computer science, a \"naive\" solution to a problem \nis an obvious, straightforward approach someone with no special knowledge might \noffer as a first attempt. Textbooks often present one before revealing a\nmuch more efficient, if less obvious, alternative. [Bubble sort](https://en.wikipedia.org/wiki/Bubble_sort) is \nsimple enough that a novice programmer might discover it themselves. \n[Merge sort](https://en.wikipedia.org/wiki/Merge_sort) is much harder to understand \n(at least if you're not [John von Neumann](https://en.wikipedia.org/wiki/John_von_Neumann)),\nbut it's much more efficient on large inputs.\n\nFor our purposes, naive code comes from \nan enthusiastic but inexperienced user trying to solve a problem at the \nedge of their abilities. \nNaive code is fascinating. It is rarely good, since its authors know little \nof sound practices or language conventions. It contains strange design choices \nand sometimes outright errors. But these same defects make it \noddly charming, as we'll see.\n\n# An Analogy\n\nObviously, the best way to illustrate this is to analyze some ABBA lyrics. \nHere are the opening lines of \"Dancing Queen\" ([here](https://www.youtube.com/watch?v=xFrGuyw1V8s), if somehow you haven't heard it before):\n```\nYou can dance\nYou can jive\nHaving the time of your life\nOoh, see that girl\nWatch that scene\nDigging the dancing queen\n```\n\nIt's easy to miss on a first listen, but these lyrics don't sound natural \nin any widely spoken form of English.\n\"Jive\" isn't typically used as a verb. \"Scene\" isn't typically used to mean \n\"situation\";\nyou would say \"check it out\" or \"look over there,\" not \"watch that scene.\"\nWho is the singer addressing, anyway? It seems like the first three lines \nrefer to the \"dancing queen\" herself, but the last three address an observer \nwho is \"digging\" her.\n\nThe reason for this is simple. ABBA hail from Sweden; they are songwriters whose first language is Swedish trying hard to sound like \nAmericans, but not quite passing.\nBut it's hard to notice this beneath the song's amazing arrangement and vocal \nperformances.\nWhat's more, I think the song would be _worse_ if it used more idiomatic English. \n Laden with dated slang they may be, the lyrics feel oddly timeless, because they don't sound like any common form of English.\nSongs written in authentic 1970s American English usually aren't so lucky. The words \nsomehow convey the song's message perfectly even though, taken literally, they barely make \nsense. \n\n(Related: it bothers me more than it should that [another ABBA song](https://www.youtube.com/watch?v=Sj_9CiNkkn4) incorrectly claims Napoleon \nsurrendered at Waterloo. His army was routed there, but he actually surrendered to a \nBritish warship about a month later. Then again, I doubt even ABBA could make \"At Waterloo, Napoleon was decisively defeated\" scan). \n\n# Naive Code\n\nNaive code is compelling in quite a similar way. I could give examples from \npeople I've helped, but I won't; they didn't volunteer to be included in my ramblings.\nInstead, I'll use some very naive code I wrote long ago. \nHere is `coivd_19_us.R`, a snippet of R that does some simple data processing.  \nLike everyone else in April 2020, I made some visualizations of COVID-19 \ndata (though unlike most others, I managed to misspell the name of the disease).\n(If you don't know R, the problems with the code below will still be obvious if you have any programming experience). \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .source .cell-code}\nstate_pop <- read_xlsx(\"states_pop_data.xlsx\", col_names = F, skip = 9)[1:51, ] %>%\n  select(...1, ...13) %>%\n  mutate(...1 = str_remove(...1, \".\"), ...13 = ...13 / 1000) %>%\n  rename(\"state\" = ...1, \"state_pop\" = ...13)\n\ncounty_pop <- read_xlsx(\"county_pop_data.xlsx\", col_names = F, skip = 5)[1:3142, ] %>%\n  select(...1, ...12) %>%\n  separate(...1, into = c(\"county\", \"state\"), sep = \",\\\\s\") %>%\n  rename(county_pop = ...12) %>%\n  mutate(county = str_replace(str_replace(county, \"\\\\s[A-Z][a-z]*\\\\s*[A-Z]*[a-z]*$\", \"\"), \"^\\\\.\", \"\"), county_pop = county_pop / 1000)\n\n\ncombined_pop <- left_join(county_pop, state_pop, by = \"state\")\ncombined_pop <- nest_join(combined_pop, us_county, by = c(\"county\", \"state\"))\n```\n:::\n\n\nRegrettably, I have a vague memory of what this code was supposed to do. \nIt reads `.csv`s containing some state and county population data and does some \nbasic cleaning. The structure of the code is fine, but the implementation is a mess.\nMagic numbers crop up everywhere (note the obscure `...n` syntax for selecting the \n`n`th column). The column transformations are convoluted, especially \nthe double regex replacement applied to `county_pop`. The last line uses \na nested join, a special `dplyr` function that groups the matched rows in the \nright-hand data frame in a list column. I remember thinking that was an \nappropriate way to handle many-to-many relationships.\n\nIt's easy to tell the author of this snippet was blissfully unaware anyone \nwould have to read or maintain his code. (Don't snicker - everyone has had Past You pull that that \non Present You at some point). Not only did he not know his language's conventions, \nhe did not know _of_ them. \n\nThe code is bad, no doubt. But its innocent sincerity is charming. It \nreminds me of the days when there seemed nothing wrong with dashing off a chunk \nof with no clue how it fit into the project it was part of. Naive code \ncan contain other unexpected delights, too. I've seen attempts to add factors \n(an R class for categoricals that cannot be added), heroic attempts to do \nwith `for` loops what could easily be done with vectorized functions, and \nevery nonstandard variable naming scheme you could think of. Novice \nprogrammers so often write logic experienced ones would never even think \nto try, and I can only respect them for it.\n\n# Conclusion\nThis analogy is strained, I admit. ABBA's unique brand of lyrics may have got them to #1, but \nnaive code as I describe it above more often leads to frustration and \nsearching for an experienced person to debug it. Helping can be a lot of work, \nbut if you find yourself asked to \nhelp, do so. It might have weeks ago, it might have been decades, but \nyou once wrote naive code, too. We all did.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}