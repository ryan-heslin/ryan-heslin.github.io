{
  "hash": "52399663b81cd1956aa1b4b114737b78",
  "result": {
    "markdown": "---\ntitle: \"Completing Advent of Code\"\nauthor: \"Ryan Heslin\"\ndate: \"2023-05-01\"\ncategories: [\"Advent of Code\"]\nurlcolor: \"blue\"\n---\n\n\nAt long last, I've earned all 400 stars available in [Advent of Code](https://adventofcode.com/). I have implemented every possible variation of Dijkstra's algorithm.\nI have spent hours scouring the [subreddit](https://www.reddit.com/r/adventofcode/) for help\nthreads tagged \"[20XX Day YY].\" I have become a lot more acquainted with the\nPython debugger than I would like. I don't regret that considerable investment\nof time, so I thought it would be worthwhile to reflect on it.\n\nI started participating in Advent of Code in 2020, shortly after entering\na data science master's program. Since then, I've found myself returning to it\nwhenever I have free time. The appeal of the puzzles never seems to dull.\n\nWhen I began the final effort to \"finish Advent of Code\", most of my backlog\nconsisted of 2017 through 2019, plus some unfinished puzzles from 2020. At first, I did the puzzles roughly in order, year\nby year. Midway through 2019, when the difficulty began to ramp up, I\ndiverted to 2018. I did the final, hardest puzzles out of sequence.\n\nThis was a long journey, undertaken in fits and starts the time I could spare over the past\ntwo and a half years. Some puzzles I tore through in a few minutes, almost without\nthinking; many took hours of effort. A few took days of attempts to crack.\nWhile I sometimes felt frustration, I enjoyed most of the process, and nothing\ndimmed my determination to finish.\n\nNaturally, a few puzzles became my favorites:\n\n* [2018 Day 23](https://adventofcode.com/2018/day/23). It presents a simple\n  but very hard problem: find the nearest point in a vast three-dimensional\n  space that falls within the greatest number of octohedra (the shape formed\n  by defining a center and a radius measured by Manhattan distance).\n  After some research, I solved it using octary search - a three-dimensional\n  generalization of binary search.\n\n* [2020 Day 20](https://adventofcode.com/2020/day/20). This puzzle, the notorious\n  \"Jurassic Jigsaw,\" involves reassembling a grid of tiles\n  into an image and finding a complex pattern within it. I found it very hard,\n  but quite satisfying, to recover the image using a variation of depth-first\n  search.\n\n* [2018 Day 22](https://adventofcode.com/2018/day/22). A fun variation on the\n  well-worn graph traversal format. In this puzzle, the graph represents an unexplored\n  cave the player has to navigate using their equipment.\n\nI had one clear least favorite: [2019 Day 22](https://adventofcode.com/2018/day/22).\nLike many people, I found this puzzle almost impossible.\nIt asks you to simulate shuffling a deck of trillions of cards trillions of times.\nSolving it before the end of our civilization requires subtle modular\narithmetic. I could only solve it by following [this tutorial](https://codeforces.com/blog/entry/72593). The experience makes me wish I'd taken a course in number theory.\n\n# Intcode\n\nI ought to weigh in on the most controversial puzzle element in the series:\nIntcode. Featured in the 2019 iteration, Intcode is a made-up CPU language\nthat relies on integer parameters and [opcodes](https://en.wikipedia.org/wiki/Opcode).\nIntcode programs take the form of lists of comma-separated integers. About half of 2019's puzzles were distributed in this format.\n\nAn early puzzle challenges the player to create an Intcode [virtual machine](https://en.wikipedia.org/wiki/Virtual_machine) and execute a simple program. Later puzzles\ncomplicate the Intcode specification and feature more elaborate programs. The player\nhas to update their VM in order to solve them. The final puzzle, in most years\na simple exercise, became something special: an interactive adventure game\nwritten entirely in Intcode.\n\nIntcode seems to have polarized the community. Some laud it for adding a new type\nof challenge in requiring the player to design and upgrade a VM. They point out\nthat it powered an exciting new kind of interactive puzzle that allowed the player to\ncontrol an Intcode program directly. Others object that Intcode was complicated,\nfinicky, and difficult to understand for anyone who hadn't taken a compilers\ncourse (such as yours truly). And the cumulative requirements for the player's VM\nmade it easy to fall behind.\n\nI agree with both viewpoints. I found it difficult to implement the Intcode VM;\nthe end result worked, but was brittle and complicated. One subtlety within\nthe instructions (the distinction between \"relative\" and \"absolute\" parameter modes)\ncost me a few hours before I found a Reddit post explaining the difference.\nBut it was worth it. I found the later Intcode puzzles fun and inventive.\nThey include simplified versions of [Frogger](https://en.wikipedia.org/wiki/Frogger)\nand [Breakout](https://en.wikipedia.org/wiki/Breakout_(video_game)) - a welcome\nchange of pace from variations on the [Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life) or graph pathfinding. I can see why the experiment\nwasn't repeated, but I think Intcode was a success overall, and certainly\nsomething that set 2019 apart.\n\nBefore I wrap up, here are plots showing cumulative lines of code by language for\neach year.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsource_env <- new.env()\nsource_env$years <- 2015:2022\nsource_env$csv <- \"../../data/line_counts.csv\"\nsource(\"../../scripts/plot_lines.R\", local = source_env)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-2.png){fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-3.png){fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-4.png){fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-5.png){fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-6.png){fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-7.png){fig-align='center' width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-8.png){fig-align='center' width=672}\n:::\n:::\n\n\n# Last Thoughts\n\nI learned a good deal in the process. I got to practice applying\n[Dijkstra's algorithm](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm),\ndepth-first search, and (yes) modular arithmetic. Intcode, as noted, was\na sometimes harsh lesson in how to meet an evolving specification. But I think\nthe most important skill Advent of Code teaches is how to\ntranslate convoluted problem statements into code. Much of the fun comes from  uncovering the\nwell-posed problem buried in the elaborate elf-related scenario presented by the\nnarrative text. That experience comes in handy in real life, where\nrequirements are rarely so clear.\n\nAbove all, I was left with an appreciation for the hard work it must have taken to\ncreate Advent of Code. The puzzles often return to the same concepts, but\neach is unique. And the puzzle text itself is always both a precise problem\nstatement and a continuation of the charmingly silly narrative that ties\neach year together. The whole experience remains cohesive and rewarding,\neven hundreds of puzzles in.\n\nWhat next? I could certainly improve my solutions; some contain dubious hacks or take an uncomfortably\nlong time to run. But I think I'll find other projects to occupy me - at\nleast until next December, that is.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}