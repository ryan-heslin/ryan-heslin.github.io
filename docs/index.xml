<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Verso</title>
<link>https://ryan-heslin.github.io/index.html</link>
<atom:link href="https://ryan-heslin.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Home of my blog, Verso</description>
<generator>quarto-1.3.433</generator>
<lastBuildDate>Sat, 15 Jul 2023 04:00:00 GMT</lastBuildDate>
<item>
  <title>Why Quarto?</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/why-quarto/index.html</link>
  <description><![CDATA[ <p>When I started planning this blog, I initially intended to use <a href="https://rmarkdown.rstudio.com/">R Markdown</a> with <a href="https://bookdown.org/yihui/blogdown/">Blogdown</a>. But right before I committed, I learned about <a href="https://quarto.org/">Quarto</a>, a new Markdown variant with several new features. I decided to go with Quarto, and it proved the right decision. This post is about how Quarto extends R Markdown’s already formidable capabilities to produce all kinds of documents.</p>
<section id="r-markdown" class="level1"><h1>R Markdown</h1>
<p>R Markdown is a file type based on <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a>. It is designed for writing documents that combine “chunks” of R code with plain text. An R Markdown document can be “rendered” into several different types of output, most commonly <code>.html</code> or <code>.pdf</code>. Rendering executes R code contained in chunks and displays the outputs in the resulting document alongside text.</p>
<p>R Markdown is well suited for typical data science work products. When writing a report or article, it’s easy to combine code with prose that explains what it does. You write the document like this:</p>
<p>This important plot shows that two<br> principal components capture almost<br> all of the variance within <code>mtcars</code><br> ```{r}<br> plot(princomp(mtcars))<br> ```<br></p>
<div class="cell" data-layout-align="center">
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://ryan-heslin.github.io/posts/why-quarto/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>and the output is shown when it’s rendered.</p>
<p>The format also renders <a href="https://www.latex-project.org/">LaTeX</a>, which means you can use all kinds of math symbols, like this set identity.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7CA%20%5Ccup%20B%7C%20=%20%7CA%7C%20+%20%7CB%7C%20-%20A%20%5Ccap%20B%7C%0A"></p>
<p>I used R Markdown all the time in grad school. I learned the format before my first semester began, and I used it from the start to make reports to my assistantship supervisor. I became more familiar with it after changing to a data science degree. Since the data science department at my school mostly used R, it was the required format for most assignments. Its LaTeX capabilities also came in handy for linear algebra homework.</p>
<p>But a few pain points emerged over time. There was no built-in shell command to render a document from the terminal; you had to run <code>R -e 'rmarkdown::render("thefile.Rmd")'</code> or similar. Many people used R Markdown to write blogs, but no built-in support existed, so most relied on external packages like Blogdown. Most obviously, it was fundamentally <code>_R_</code> markdown. While the format can render an impressive number of non-R languages, like <a href="https://en.wikipedia.org/wiki/SQL">SQL</a> or <a href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)">Bash</a>, it was designed and intended for R, not other ecosystems. If you want to render an R Markdown file as a <a href="https://jupyter.org/">Jupyter notebook</a>, you’ll need to use a third-party tool.</p>
</section><section id="drawn-and-quartoed" class="level1"><h1>Drawn and Quartoed</h1>
<p>Quarto does all these things and more. It features a command-line interface that can render files, preview outputs, create projects, and more. It supports Jupyter notebook outputs and offers a cleaner way to set chunk options than R Markdown. Most importantly for my use case, Quarto was designed to support blog editing. <a href="https://quarto.org/docs/websites/website-blog.html">The docs even have a step-by-step guide</a>.</p>
<p>All that aside, Quarto also supports the usual R Markdown features. You can run code from various languages, customize chunks to your heart’s content, and use LaTeX freely.</p>
<p>These facts make Quarto ideal for a blog like this. The workflow is simple. When I want to write a new post, I change directory to the project root and create <code>posts/important-content/index.qmd</code>, where <code>important-content</code> is the post title. (But I repeat myself, for all my content is important). Then I write <code>index.qmd</code>, the file that will be turned into an HTML document containing the post text. Once done, I use <code>quarto render posts/important-content</code> to create the HTML output, then <code>quarto preview</code> to find out how it would look once uploaded. I make any needed tweaks, then repeat the process as needed. Once satisfied, I <code>git commit</code> and push to the repository where the blog lives.</p>
<p>I’m sure I’ll discover some pain points with Quarto eventually, but so far it’s been a smooth experience. And when I do, I’m pretty confident they’ll be resolved with the successor file format.</p>


<!-- -->

</section> ]]></description>
  <category>R</category>
  <guid>https://ryan-heslin.github.io/posts/why-quarto/index.html</guid>
  <pubDate>Sat, 15 Jul 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>The Unexpected Pleasures of Naive Code</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/naive-code/index.html</link>
  <description><![CDATA[ <p>As a moderator of a technical Discord server, I’ve encountered a lot of “naive” code. In computer science, a “naive” solution to a problem is an obvious, straightforward approach someone with no special knowledge might offer as a first attempt. Textbooks often present one before revealing a much more efficient, if less obvious, alternative. <a href="https://en.wikipedia.org/wiki/Bubble_sort">Bubble sort</a> is simple enough that a novice programmer might discover it themselves. <a href="https://en.wikipedia.org/wiki/Merge_sort">Merge sort</a> is much harder to understand (at least if you’re not <a href="https://en.wikipedia.org/wiki/John_von_Neumann">John von Neumann</a>), but it’s much more efficient on large inputs.</p>
<p>For our purposes, naive code comes from an enthusiastic but inexperienced user trying to solve a problem at the edge of their abilities. Naive code is fascinating. It is rarely good, since its authors know little of sound practices or language conventions. It contains strange design choices and sometimes outright errors. But these same defects make it oddly charming, as we’ll see.</p>
<section id="an-analogy" class="level1"><h1>An Analogy</h1>
<p>Obviously, the best way to illustrate this is to analyze some ABBA lyrics. Here are the opening lines of “Dancing Queen” (<a href="https://www.youtube.com/watch?v=xFrGuyw1V8s">here</a>, if somehow you haven’t heard it before):</p>
<pre><code>You can dance
You can jive
Having the time of your life
Ooh, see that girl
Watch that scene
Digging the dancing queen</code></pre>
<p>It’s easy to miss on a first listen, but these lyrics don’t sound natural in any widely spoken form of English. “Jive” isn’t typically used as a verb. “Scene” isn’t typically used to mean “situation”; you would say “check it out” or “look over there,” not “watch that scene.” Who is the singer addressing, anyway? It seems like the first three lines refer to the “dancing queen” herself, but the last three address an observer who is “digging” her.</p>
<p>The reason for this is simple. ABBA hail from Sweden; they are songwriters whose first language is Swedish trying hard to sound like Americans, but not quite passing. But it’s hard to notice this beneath the song’s amazing arrangement and vocal performances. What’s more, I think the song would be <em>worse</em> if it used more idiomatic English. Laden with dated slang they may be, the lyrics feel oddly timeless, because they don’t sound like any common form of English. Songs written in authentic 1970s American English usually aren’t so lucky. The words somehow convey the song’s message perfectly even though, taken literally, they barely make sense.</p>
<p>(Related: it bothers me more than it should that <a href="https://www.youtube.com/watch?v=Sj_9CiNkkn4">another ABBA song</a> incorrectly claims Napoleon surrendered at Waterloo. His army was routed there, but he actually surrendered to a British warship about a month later. Then again, I doubt even ABBA could make “At Waterloo, Napoleon was decisively defeated” scan).</p>
</section><section id="naive-code" class="level1"><h1>Naive Code</h1>
<p>Naive code is compelling in quite a similar way. I could give examples from people I’ve helped, but I won’t; they didn’t volunteer to be included in my ramblings. Instead, I’ll use some very naive code I wrote long ago. Here is <code>coivd_19_us.R</code>, a snippet of R that does some simple data processing.<br>
Like everyone else in April 2020, I made some visualizations of COVID-19 data (though unlike most others, I managed to misspell the name of the disease). (If you don’t know R, the problems with the code below will still be obvious if you have any programming experience).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">state_pop</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xlsx</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"states_pop_data.xlsx"</span>, col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">F</span>, skip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">...1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">...13</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>...1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">...1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, ...13 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">...13</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">...1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state_pop"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">...13</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>

<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">county_pop</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_xlsx</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"county_pop_data.xlsx"</span>, col_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">F</span>, skip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3142</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">select</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">...1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">...12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">separate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">...1</span>, into <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"county"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">",\\s"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>county_pop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">...12</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>county <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">county</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\\s[A-Z][a-z]*\\s*[A-Z]*[a-z]*$"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^\\."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, county_pop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">county_pop</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>


<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">combined_pop</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">left_join</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">county_pop</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">state_pop</span>, by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">combined_pop</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nest_join</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">combined_pop</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">us_county</span>, by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"county"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"state"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
</div>
<p>Regrettably, I have a vague memory of what this code was supposed to do. It reads <code>.csv</code>s containing some state and county population data and does some basic cleaning. The structure of the code is fine, but the implementation is a mess. Magic numbers crop up everywhere (note the obscure <code>...n</code> syntax for selecting the <code>n</code>th column). The column transformations are convoluted, especially the double regex replacement applied to <code>county_pop</code>. The last line uses a nested join, a special <code>dplyr</code> function that groups the matched rows in the right-hand data frame in a list column. I remember thinking that was an appropriate way to handle many-to-many relationships.</p>
<p>It’s easy to tell the author of this snippet was blissfully unaware anyone would have to read or maintain his code. (Don’t snicker - everyone has had Past You pull that that on Present You at some point). Not only did he not know his language’s conventions, he did not know <em>of</em> them.</p>
<p>The code is bad, no doubt. But its innocent sincerity is charming. It reminds me of the days when there seemed nothing wrong with dashing off a chunk of with no clue how it fit into the project it was part of. Naive code can contain other unexpected delights, too. I’ve seen attempts to add factors (an R class for categoricals that cannot be added), heroic attempts to do with <code>for</code> loops what could easily be done with vectorized functions, and every nonstandard variable naming scheme you could think of. Novice programmers so often write logic experienced ones would never even think to try, and I can only respect them for it.</p>
</section><section id="conclusion" class="level1"><h1>Conclusion</h1>
<p>This analogy is strained, I admit. ABBA’s unique brand of lyrics may have got them to #1, but naive code as I describe it above more often leads to frustration and searching for an experienced person to debug it. Helping can be a lot of work, but if you find yourself asked to help, do so. It might have weeks ago, it might have been decades, but you once wrote naive code, too. We all did.</p>


<!-- -->

</section> ]]></description>
  <category>Miscellany</category>
  <guid>https://ryan-heslin.github.io/posts/naive-code/index.html</guid>
  <pubDate>Thu, 13 Jul 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Erica Albright was Right</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/erica-albright/index.html</link>
  <description><![CDATA[ <p><a href="https://en.wikipedia.org/wiki/The_Social_Network"><em>The Social Network</em></a>, the classic David Fincher film about the founding of Facebook, opens with the <a href="https://www.youtube.com/watch?v=uvap4gEOC5I">following exchange</a>. It’s a Tuesday night in autumn 2003. Mark Zuckerberg, a computer science sophomore at Harvard, is at a tavern on a date with the fictional Erica Albright:</p>
<div class="callout callout-style-simple callout-none no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<p>Zuckerberg: Did you know there are more people with genius IQs living in China than there are people of any kind living in the United States?</p>
<p>Albright: That can’t possibly be true.</p>
<p>Zuckerberg: It is.</p>
<p>Albright: What would account for that?</p>
</div>
</div>
</div>
<p>Albright’s intuition is right, though Zuckerberg derails the conversation before she can challenge him further. Some calculations show that Zuckerberg’s claim is ridiculous.</p>
<section id="establishing-numbers" class="level1"><h1>Establishing Numbers</h1>
<p>According to the World Bank, in 2003 China had <a href="https://data.worldbank.org/country/china?view=chart">1.29 billion</a> people and the United States had <a href="https://data.worldbank.org/country/united-states?view=chart">290,108,000</a> (rounding to the nearest hundred, not that it matters).</p>
<p>While there are many ways to define genius, I’ll use <a href="https://en.wikipedia.org/wiki/Intelligence_quotient">intelligence quotient</a>, a well-known measure that is easy to work with. IQ is typically described as normally distributed, with mean 100 and standard deviation about 15. There is no universally accepted cutoff for a “genius” IQ. To be charitable, I’ll define it as 130 or greater, a mere two standard deviations above the mean.</p>
<p>If we assume each country has the same theoretical IQ distribution, how many geniuses would we expect in each?</p>
</section><section id="calculations" class="level1"><h1>Calculations</h1>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">us_pop</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">290108000</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">china_pop</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1290000000</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mu</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sigma</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">genius</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">130</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cutoff</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/Normal.html">pnorm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">genius</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mu</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sigma</span>, lower.tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">us_geniuses</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Round.html">floor</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cutoff</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">us_pop</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">china_geniuses</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Round.html">floor</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cutoff</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">china_pop</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
</div>
<p>The China-US ratio is 4.45, so under these assumptions China has that many times more geniuses. But the ratio of U.S. population to Chinese geniuses is 9.89. There would need to be almost 10 times more Chinese geniuses than there are under these assumptions for Zuckerberg to be correct. If we use a higher IQ score as the genius cutoff, the ratio gets even worse.</p>
<p>There are infinitely many implausible IQ distributions that would justify Zuckerberg’s claim. For simplicity, let us pose an optimization problem. Given China’s actual population and a U.S. mean IQ of 100, how high must China’s mean IQ be for Zuckerberg’s claim to be correct? That is, what is the lowest mean IQ value for which the right tail area of the normal CDF is greater than the ratio of US to Chinese population?</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">validate_mean</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mu</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Round.html">floor</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/Normal.html">pnorm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">genius</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mu</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sigma</span>, lower.tail <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">china_pop</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">us_pop</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">grid</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/seq.html">seq</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">minimum</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Extremes.html">min</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">grid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_mean</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">grid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">minimum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 118.67</code></pre>
</div>
</div>
<p>Zuckerberg’s claim would require the average Chinese to have an IQ more than one standard deviation above the U.S. average. I couldn’t find reliable IQ data for China, and intelligence is notoriously hard to measure. But for the claim to be true, the average Chinese would be more intelligent than about 89.3% of Americans, which is unbelievable.</p>
<p>Supposing instead China has the same IQ distribution as the United States, how many Chinese would there have to be for Zuckerberg’s claim to be correct? This can be solved algebraically:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Round.html">floor</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">us_pop</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cutoff</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 12751926040</code></pre>
</div>
</div>
<p>That is about 10 times the actual 2003 population of China.</p>
</section><section id="conclusion" class="level1"><h1>Conclusion</h1>
<p>In fairness to the real Zuckerberg, this conversation is fictional, and I’m skeptical he would really have made the claim this post dissects. As a computer science sophomore at an elite university, he likely understood the properties of normal distributions well enough to know it was implausible. Or maybe the script means to imply that he’s trying to impress a listener he thinks is naive with nonsense, as I’ve always interpreted Han Solo’s nonsensical boast in <em>Star Wars</em> that the Millennium Falcon can make the Kessel Run in less than twelve <a href="https://en.wikipedia.org/wiki/Parsec">parsecs</a>. That would also explain why Zuckerberg keeps changing the subject whenever Albright presses him on the point. Either way, Albright is clearly right.</p>
<p>One other note: During the hacking montage that follows the tavern scene, Zuckerberg says (in voiceover), “So it’s definitely necessary to break out Emacs and modify that Perl script.” As a Neovim user, I’m required to remind you it is <em>never</em> necessary to break out Emacs. Editing bliss is always just a <code>which vim</code> away.</p>


<!-- -->

</section> ]]></description>
  <category>Miscellany</category>
  <guid>https://ryan-heslin.github.io/posts/erica-albright/index.html</guid>
  <pubDate>Tue, 13 Jun 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Completing Advent of Code</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/aoc-complete/index.html</link>
  <description><![CDATA[ <p>At long last, I’ve earned all 400 stars available in <a href="https://adventofcode.com/">Advent of Code</a>. I have implemented every possible variation of Dijkstra’s algorithm. I have spent hours scouring the <a href="https://www.reddit.com/r/adventofcode/">subreddit</a> for help threads tagged “[20XX Day YY].” I have become a lot more acquainted with the Python debugger than I would like. I don’t regret that considerable investment of time, so I thought it would be worthwhile to reflect on it.</p>
<p>I started participating in Advent of Code in 2020, shortly after entering a data science master’s program. Since then, I’ve found myself returning to it whenever I have free time. The appeal of the puzzles never seems to dull.</p>
<p>When I began the final effort to “finish Advent of Code”, most of my backlog consisted of 2017 through 2019, plus some unfinished puzzles from 2020. At first, I did the puzzles roughly in order, year by year. Midway through 2019, when the difficulty began to ramp up, I diverted to 2018. I did the final, hardest puzzles out of sequence.</p>
<p>This was a long journey, undertaken in fits and starts the time I could spare over the past two and a half years. Some puzzles I tore through in a few minutes, almost without thinking; many took hours of effort. A few took days of attempts to crack. While I sometimes felt frustration, I enjoyed most of the process, and nothing dimmed my determination to finish.</p>
<p>Naturally, a few puzzles became my favorites:</p>
<ul>
<li><p><a href="https://adventofcode.com/2018/day/23">2018 Day 23</a>. It presents a simple but very hard problem: find the nearest point in a vast three-dimensional space that falls within the greatest number of octohedra (the shape formed by defining a center and a radius measured by Manhattan distance). After some research, I solved it using octary search - a three-dimensional generalization of binary search.</p></li>
<li><p><a href="https://adventofcode.com/2020/day/20">2020 Day 20</a>. This puzzle, the notorious “Jurassic Jigsaw,” involves reassembling a grid of tiles into an image and finding a complex pattern within it. I found it very hard, but quite satisfying, to recover the image using a variation of depth-first search.</p></li>
<li><p><a href="https://adventofcode.com/2018/day/22">2018 Day 22</a>. A fun variation on the well-worn graph traversal format. In this puzzle, the graph represents an unexplored cave the player has to navigate using their equipment.</p></li>
</ul>
<p>I had one clear least favorite: <a href="https://adventofcode.com/2018/day/22">2019 Day 22</a>. Like many people, I found this puzzle almost impossible. It asks you to simulate shuffling a deck of trillions of cards trillions of times. Solving it before the end of our civilization requires subtle modular arithmetic. I could only solve it by following <a href="https://codeforces.com/blog/entry/72593">this tutorial</a>. The experience makes me wish I’d taken a course in number theory.</p>
<section id="intcode" class="level1"><h1>Intcode</h1>
<p>I ought to weigh in on the most controversial puzzle element in the series: Intcode. Featured in the 2019 iteration, Intcode is a made-up CPU language that relies on integer parameters and <a href="https://en.wikipedia.org/wiki/Opcode">opcodes</a>. Intcode programs take the form of lists of comma-separated integers. About half of 2019’s puzzles were distributed in this format.</p>
<p>An early puzzle challenges the player to create an Intcode <a href="https://en.wikipedia.org/wiki/Virtual_machine">virtual machine</a> and execute a simple program. Later puzzles complicate the Intcode specification and feature more elaborate programs. The player has to update their VM in order to solve them. The final puzzle, in most years a simple exercise, became something special: an interactive adventure game written entirely in Intcode.</p>
<p>Intcode seems to have polarized the community. Some laud it for adding a new type of challenge in requiring the player to design and upgrade a VM. They point out that it powered an exciting new kind of interactive puzzle that allowed the player to control an Intcode program directly. Others object that Intcode was complicated, finicky, and difficult to understand for anyone who hadn’t taken a compilers course (such as yours truly). And the cumulative requirements for the player’s VM made it easy to fall behind.</p>
<p>I agree with both viewpoints. I found it difficult to implement the Intcode VM; the end result worked, but was brittle and complicated. One subtlety within the instructions (the distinction between “relative” and “absolute” parameter modes) cost me a few hours before I found a Reddit post explaining the difference. But it was worth it. I found the later Intcode puzzles fun and inventive. They include simplified versions of <a href="https://en.wikipedia.org/wiki/Frogger">Frogger</a> and <a href="https://en.wikipedia.org/wiki/Breakout_(video_game)">Breakout</a> - a welcome change of pace from variations on the <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Game of Life</a> or graph pathfinding. I can see why the experiment wasn’t repeated, but I think Intcode was a success overall, and certainly something that set 2019 apart.</p>
<p>Before I wrap up, here are plots showing cumulative lines of code by language for each year.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">source_env</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/environment.html">new.env</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">source_env</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">years</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2015</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">source_env</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">csv</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../../data/line_counts.csv"</span>
<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/source.html">source</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../../scripts/plot_lines.R"</span>, local <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">source_env</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://ryan-heslin.github.io/posts/aoc-complete/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://ryan-heslin.github.io/posts/aoc-complete/index_files/figure-html/unnamed-chunk-2-2.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://ryan-heslin.github.io/posts/aoc-complete/index_files/figure-html/unnamed-chunk-2-3.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://ryan-heslin.github.io/posts/aoc-complete/index_files/figure-html/unnamed-chunk-2-4.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://ryan-heslin.github.io/posts/aoc-complete/index_files/figure-html/unnamed-chunk-2-5.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://ryan-heslin.github.io/posts/aoc-complete/index_files/figure-html/unnamed-chunk-2-6.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://ryan-heslin.github.io/posts/aoc-complete/index_files/figure-html/unnamed-chunk-2-7.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://ryan-heslin.github.io/posts/aoc-complete/index_files/figure-html/unnamed-chunk-2-8.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section><section id="last-thoughts" class="level1"><h1>Last Thoughts</h1>
<p>I learned a good deal in the process. I got to practice applying <a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra’s algorithm</a>, depth-first search, and (yes) modular arithmetic. Intcode, as noted, was a sometimes harsh lesson in how to meet an evolving specification. But I think the most important skill Advent of Code teaches is how to translate convoluted problem statements into code. Much of the fun comes from uncovering the well-posed problem buried in the elaborate elf-related scenario presented by the narrative text. That experience comes in handy in real life, where requirements are rarely so clear.</p>
<p>Above all, I was left with an appreciation for the hard work it must have taken to create Advent of Code. The puzzles often return to the same concepts, but each is unique. And the puzzle text itself is always both a precise problem statement and a continuation of the charmingly silly narrative that ties each year together. The whole experience remains cohesive and rewarding, even hundreds of puzzles in.</p>
<p>What next? I could certainly improve my solutions; some contain dubious hacks or take an uncomfortably long time to run. But I think I’ll find other projects to occupy me - at least until next December, that is.</p>


<!-- -->

</section> ]]></description>
  <category>Advent of Code</category>
  <guid>https://ryan-heslin.github.io/posts/aoc-complete/index.html</guid>
  <pubDate>Mon, 01 May 2023 04:00:00 GMT</pubDate>
</item>
<item>
  <title>ChatGPT Has a Long Way to Go</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/chatGPT-test/index.html</link>
  <description><![CDATA[ 




<p>Like everyone else, I’ve spent some time over the past few months toying with <a href="https://openai.com/blog/chatgpt">ChatGPT</a>, the new chatbot trained on the latest publicly available version of <a href="https://openai.com/">OpenAI</a>’s large language model.</p>
<p>You may already have heard about ChatGPT’s impressive capabilities. It can write code to specifications, answer factual questions, and even write coherent <a href="https://www.vice.com/en/article/epzjew/chatgpt-is-so-bad-at-essays-that-professors-can-spot-it-instantly">essays</a>.</p>
<p>The second capability interests me the most. I served as a TA in graduate school, and I spend a good deal of my free time helping people with R problems. Both roles, involve helping people debug or improve their code and answering their questions about the subject. ChatGPT can do both tasks, but is it good enough to render me obsolete?</p>
<p>For now, I think the answer is no. ChatGPT’s limitations become obvious with experience. It refuses to take a stance on anything remotely controversial. A typical response will give one viewpoint, say “On the other hand…”, then express the other. Its prose is, well, mechanical: it composes long, monotonous sentences with bland, inexact diction. Writers for content farms will soon become obsolete, but anyone skilled is safe for now.</p>
<p>These are are mere annoyances. One quirk, however, is dangerous to naive users: ChatGPT will confidently give you false information. Like an arrogant party guest who will invent an answer to any question you ask them rather than admit, “I don’t know,” it always seems to have a coherent response - just not necessarily the correct one.</p>
<p>I fed ChatGPT a few technical questions to see if I could catch it in an error. To my surprise, it knew how to derive the number <img src="https://latex.codecogs.com/png.latex?e"> from a Taylor series, which takes some knowledge of calculus:</p>
<p><img src="https://ryan-heslin.github.io/img/taylor.png" class="img-fluid"></p>
<p>I followed up with an outright trick question:</p>
<p><img src="https://ryan-heslin.github.io/img/tuple.png" class="img-fluid"></p>
<p>Gotcha. Actually, Python tuples <em>can</em> contain references to mutable objects, even though tuples themselves are immutable. It would be silly ever to do this, but you can:</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb1-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-3">y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].append(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(y)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>([1, 2, 3, 1], 4, (1, 2))</code></pre>
</div>
</div>
<p>I could have declared victory there, but I pressed on. People are often nonplussed when I tell them I enjoyed linear algebra class. Hence the next question: what are the possible numbers of solutions to a system of linear equations?</p>
<p>ChatGPT replied with this:</p>
<p><img src="https://ryan-heslin.github.io/img/equations.png" class="img-fluid"></p>
<p>This is, at best, a distortion of the truth. We may as well do this rigorously. Let <img src="https://latex.codecogs.com/png.latex?A"> be the coefficient matrix and of the equation <img src="https://latex.codecogs.com/png.latex?Ax=b">. A system with more unknowns than equations has either no solution or infinitely many solutions. A system with more equations than unknowns may have zero solutions, one solution, or infinitely many solutions. A system with exactly as many unknowns as equations may also have zero, one, or infinitely many solutions.</p>
<p>In each case, at least one solution exists if and only if <img src="https://latex.codecogs.com/png.latex?b"> lies entirely within the image of <img src="https://latex.codecogs.com/png.latex?A"> (the linear space spanned by its column vectors). In the first case, a unique solution is impossible because the column vectors of <img src="https://latex.codecogs.com/png.latex?A"> must be linearly dependent. <img src="https://latex.codecogs.com/png.latex?n"> linearly independent vectors span a vector space of dimension <img src="https://latex.codecogs.com/png.latex?n">, such that any vector within it corresponds to a unique linear combination of the vectors. But more unknowns than equations means more than <img src="https://latex.codecogs.com/png.latex?n"> vectors, meaning at least one must be redundant. So in this case, there are infinitely many ways of forming vectors in <img src="https://latex.codecogs.com/png.latex?A">’s image from its columns, and hence either zero or infinitely many solutions.</p>
<p>In the other two cases, at most one solution exists if the rank of the matrix (the number of linearly independent column vectors, or, equivalently, row vectors) is at least the number of unknowns. Then the column vectors form a basis for the image of <img src="https://latex.codecogs.com/png.latex?A">, so any solutions must be unique. This is not a sufficient criterion for a matrix with more unknowns than equations: <img src="https://latex.codecogs.com/png.latex?b"> may not be in the image of <img src="https://latex.codecogs.com/png.latex?A">, in which case no solution exists. If the numbers of equations and unknowns are equal, of course, the rank equaling the number of columns means it also equals the number of rows, ensuring a solution because the columns of <img src="https://latex.codecogs.com/png.latex?A"> form a basis for a <img src="https://latex.codecogs.com/png.latex?n">-dimensional vector space. In general, one or more solutions must exist if and only if the rank of <img src="https://latex.codecogs.com/png.latex?A"> is at least the number of rows, and a solution is unique (assuming it exists) if and only if the rank is at least the number of columns. Only if the rank is equal to both quantities is a unique solution guaranteed.</p>
<p>The reference to determinants also misleads, since they are only defined if the number of equations and the number of unknowns are equal and <img src="https://latex.codecogs.com/png.latex?A"> is square.</p>
<p>How many unwitting linear algebra students have asked this innocent question and received a response this misleading? Probably at least some.</p>
<p>In the unlikely event you’re still reading this, I was tempted to ask ChatGPT for more information about its fascinating theory of heterodox linear algebra. But instead I corrected it.</p>
<p><img src="https://ryan-heslin.github.io/img/correction.png" class="img-fluid"></p>
<p>Here we see a common pattern: ChatGPT confidently says something wrong. The user pushes back. ChatGPT meekly agrees. It spouts garbled nonsense, like a student faking understanding. The illusion that the bot is actually reasoning collapses.</p>
<p>ChatGPT is a major advance, perhaps a milestone. It casts a convincing illusion of intelligence. Unlike earlier chatbots, it is smart and reliable enough to have real uses. But anyone approaching it as an oracle is bound to be disappointed. None of its factual claims, especially about technical subjects, should be trusted without verification. But if you have to do your own research anyway to confirm what it tells you, why ask it for help to begin with?</p>
<p>As a programmer, I suspect ChatGPT or its successors will begin automating parts of my job soon enough. I feel a twinge of unease at the prospect. But the day AI replaces us outright, if it will ever come, is not nigh.</p>


<!-- -->


 ]]></description>
  <guid>https://ryan-heslin.github.io/posts/chatGPT-test/index.html</guid>
  <pubDate>Wed, 08 Mar 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>What a Difference Two Years Makes</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/two-years/index.html</link>
  <description><![CDATA[ <p><em>This post contains spoilers for day 19 of Advent of Code 2017.</em></p>
<p>In the past few week, I’ve gone back and completed some <a href="https://adventofcode.com/">Advent of Code</a> puzzles I never got around to finishing. While working through 2017, I came across <a href="https://adventofcode.com/2017/day/19">Day 19</a>. It asks you to traverse a line that extends across a map, with several changes of direction. In typical Advent of Code fashion, everything is presented as as a file of ASCII characters. (The title is also a <a href="https://en.wikipedia.org/wiki/Series_of_tubes">quality reference</a>.)</p>
<p>I first attempted the puzzle in the summer of 2021, when I had no clue what I was doing. I plunged in without a plan, and the code got messier and messier. I thought it made sense to represent the map as a matrix, but it made keeping track of position complicated. I hadn’t yet learned that nothing makes a puzzle harder than the wrong choice of data structure. I eventually hacked my way to a correct solution, but it was kludgy and slow. I felt exhausted rather than triumphant.</p>
<p>I won’t subject you to the whole script. The first lines, containing the helper functions I wrote, give enough of an impression:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://magrittr.tidyverse.org">magrittr</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>

<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">index2coords</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">X</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">index</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/ifelse.html">ifelse</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">index</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Arithmetic.html">%%</a></span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/nrow.html">nrow</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">X</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/nrow.html">nrow</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">X</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">index</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Arithmetic.html">%%</a></span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/nrow.html">nrow</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">X</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">index</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/Arithmetic.html">%%</a></span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/nrow.html">ncol</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">X</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords2index</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">X</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/nrow.html">nrow</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">X</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>

<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">next_direction</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">input</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">last_dir</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">passed</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">steps</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">candidates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">surrounds</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">input</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">excludes</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
    l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>,
    r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>,
    u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>,
    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u"</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">candidates</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span>
    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">candidates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colnames.html">rownames</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">candidates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">excludes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">last_dir</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">next_dir</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span>
    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colnames.html">rownames</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">candidates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">input</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">candidates</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>, , drop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/print.html">print</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">traverse</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">input</span>,
    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords</span>,
    dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">next_dir</span>,
    passed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">passed</span>,
    steps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">steps</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">surrounds</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">input</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">base</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">adds</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/cbind.html">cbind</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">base</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/rev.html">rev</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">base</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">out</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/sweep.html">sweep</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">adds</span>,
    FUN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">`+`</span>,
    STATS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
    MARGIN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colnames.html">rownames</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">out</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"u"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"l"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">out</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">validate_coords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">input</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">validate_coords</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">input</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dims</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/dim.html">dim</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">input</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/apply.html">apply</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">coords</span>, MARGIN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/all.html">all</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">dims</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></code></pre></div>
</div>
<p>Verbose and complicated.</p>
<p>Wondering how I could do better, I found a concise Python solution to the puzzle. It cleverly used a dict of complex numbers to represent the map - a classic hack I had never though to use. I remembered the trick and moved on to to other problems.</p>
<p>A few months shy of two years passed. Then, one morning, I came back to the puzzle. In about twenty leisurely minutes, I came up with this:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python source code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> operator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> attrgetter</span>
<span id="cb2-2"></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parse(lines):</span>
<span id="cb2-5">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j, line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(lines):</span>
<span id="cb2-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, char <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(line):</span>
<span id="cb2-8">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>:</span>
<span id="cb2-9">                result[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">complex</span>(i, j)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> char</span>
<span id="cb2-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> result</span>
<span id="cb2-11"></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> neighbors(point):</span>
<span id="cb2-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {</span>
<span id="cb2-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">complex</span>(point.real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, point.imag): <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">0j</span>,</span>
<span id="cb2-16">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">complex</span>(point.real <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, point.imag): <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">0j</span>,</span>
<span id="cb2-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">complex</span>(point.real, point.imag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>,</span>
<span id="cb2-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">complex</span>(point.real, point.imag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>): <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>,</span>
<span id="cb2-19">    }</span>
<span id="cb2-20"></span>
<span id="cb2-21"></span>
<span id="cb2-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs/day19.txt"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb2-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">raw_input</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read().splitlines()</span>
<span id="cb2-24"></span>
<span id="cb2-25">grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">raw_input</span>)</span>
<span id="cb2-26">position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(grid.keys(), key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>attrgetter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"imag"</span>))</span>
<span id="cb2-27">direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span></span>
<span id="cb2-28">found <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb2-29">traversed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-30">char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-"</span></span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> char:</span>
<span id="cb2-33">    last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> position</span>
<span id="cb2-34">    position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> direction</span>
<span id="cb2-35">    char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid.get(position, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-36">    traversed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> char.isalpha():</span>
<span id="cb2-38">        found <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> char</span>
<span id="cb2-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> char <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"+"</span>:</span>
<span id="cb2-40">        this_neighbors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> neighbors(position)</span>
<span id="cb2-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dest, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> this_neighbors.items():</span>
<span id="cb2-42">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> grid.get(dest) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> dest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> last:</span>
<span id="cb2-43">                direction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span></span>
<span id="cb2-44">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb2-45"></span>
<span id="cb2-46"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(found)</span>
<span id="cb2-47"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(traversed)</span></code></pre></div>
</div>
<p>This is merely workmanlike, but compared to my original solution it may as well be the source for the <a href="https://en.wikipedia.org/wiki/Apollo_Guidance_Computer">Apollo Guidance Computer</a>. I implemented the complex-number approach, as I now know to do, and the code practically wrote itself. After parsing the map, I simply have to keep track of the position and direction of motion and update the motion one unit at a time. Changing directions at one of the junctions on the road the puzzle simulates just means checking neighbors for the road’s continuation. I use the empty string to represent the end of the road and terminate the <code>while</code> loop.</p>
<p>Looking back, I realized this puzzle wasn’t really hard, at least for Advent of Code. (For an example of “hard”, see <a href="https://adventofcode.com/2020/day/20">here</a>. I struggled the first time from inexperience. With experience, it came easily. So easily that it seems amazing the problem ever seemed hard.</p>


<!-- -->


 ]]></description>
  <category>Advent of Code</category>
  <guid>https://ryan-heslin.github.io/posts/two-years/index.html</guid>
  <pubDate>Sun, 05 Feb 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Lexical Scope: Who Does It Best?</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/lexical-scope/index.html</link>
  <description><![CDATA[ <section id="introduction" class="level1"><h1>Introduction</h1>
<p>Most programming languages have some notion of scope: a frame of names bound to values. A program will involve many interlocking scopes, all associated with constructs like functions and (in some languages) blocks. Each language has its own rules for managing scope. These rules determine how references to variable names are resolved at runtime. They typically organize scopes into a hierarchy and determine which scope “wins” when the same name exists in multiple scopes visible at a given time. An important part of scoping rules is what happens when a name is looked up in a scope where it is not bound to any object. As we will see, different languages have different ways of handling this case.</p>
<p>A common pattern is called <em>lexical scope</em>. This means that objects, particularly functions, consider their parent scope to be the scope where they were defined. In a lexically scoped language, if a function can’t find an object called <code>x</code> in its execution environment, the interpreter or compiler would look next in whichever environment the function was defined in (often called the enclosing environment). This behavior has the advantage of consistency, since a given function’s enclosing environment is the same no matter where the function is called.</p>
<p>Languages with lexical scope often allow assignments in a function’s enclosing environment. If a function is defined in the global environment, this is usually bad idea, since it violates the principle that functions should avoid unnecessary side effects. But side effects are no issue if that enclosing environment is <em>another</em> function’s execution environment. Suppose <code>f</code> is a function that returns a function <code>g</code> when called. <code>g</code>’s enclosing environment, the place it was defined, is <code>f</code>’s execution environment. So any binding <code>g</code> makes in its enclosing environment when it is called is visible <em>only</em> to subsequent calls to <code>g</code>! This fact makes it possible for functions to read and write a private cache, enabling a host of powerful programming techniques.</p>
<p>This post compares the syntax several languages use for assignments in enclosing scope. We’ll implement a common pattern in each and contrast the languages’ very different means of supporting the same basic idea.</p>
<p>That pattern is called <a href="https://en.wikipedia.org/wiki/Memoization">memoization</a>. It can be used to write functions that “remember” their result for a given input after computing it the first time. This approach trades performance for memory; used well, it can speed up code by saving the results of expensive computations instead of repeating them.</p>
<p>We’ll compare how several popular languages approach lexical scope using a simple application called <code>neighbors</code>. <code>neighbors</code> is a function that returns a memoized function that finds the four non-diagonal neighbors of a point on a two-dimensional <a href="https://en.wikipedia.org/wiki/Cartesian_coordinate_system">Cartesian</a> grid. Each time this function is called on a new point, it computes that point’s neighbors and stores them in an associative data structure in its enclosing environment. Subsequent calls with the same argument find the cached value and return it, preventing repeated computation. While trivial, this technique might be useful on certain <a href="https://adventofcode.com">Advent of Code</a> problems, where it might be necessary to check a point’s neighbors many times.</p>
<p>For simplicity, I make no attempt to verify that inputs as two-dimensional coordinates, which a real implementation would have to do.</p>
</section><section id="python" class="level1"><h1>Python</h1>
<p>We may as well start with good old Python. One of Python’s core design principles is “explicit is better than implicit.” So it is with lexical scope. If you want to modify a variable in the global environment from within a function (which you probably shouldn’t), you have to use the <code>global</code> keyword:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python source code-with-copy"><code class="sourceCode python"><span id="cb1-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> modify():</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">global</span> x</span>
<span id="cb1-5">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb1-6">modify()</span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- 6</code></pre>
</div>
</div>
<p>There is a different keyword, <code>nonlocal</code>, that should be used when the enclosing environemnt is a function’s evaluation environment. Here is <code>neighbors</code> in Python:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python source code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> neighbors():</span>
<span id="cb3-2">    memo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> inner(x):</span>
<span id="cb3-4">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nonlocal</span> memo</span>
<span id="cb3-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> memo.keys():</span>
<span id="cb3-6">            memo[x] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]),</span>
<span id="cb3-7">            (x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]),</span>
<span id="cb3-8">            (x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-9">            (x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> memo[x]</span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> inner</span>
<span id="cb3-12"></span>
<span id="cb3-13">get_neighbors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> neighbors()</span>
<span id="cb3-14">get_neighbors((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- ((1, 3), (3, 3), (2, 2), (2, 4))</code></pre>
</div>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python source code-with-copy"><code class="sourceCode python"><span id="cb5-1">get_neighbors((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- ((0, 4), (2, 4), (1, 3), (1, 5))</code></pre>
</div>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python source code-with-copy"><code class="sourceCode python"><span id="cb7-1">get_neighbors((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- ((1, 3), (3, 3), (2, 2), (2, 4))</code></pre>
</div>
</div>
<p>This implementation shows off one of my favorite Python features: any immutable object can serve as a dict key, not just strings. We can just use coordinates as indices. The use of keywords makes it impossible to use global data unless you really want to, but it’s hardly elegant.</p>
<p>I could have avoided most of the work above by just writing a function to compute neighbors and adding the <code>cache</code> decorator from the <code>functools</code> module. (In Python, decorators are functions that modify other functions. A special syntax exists for applying them). That would have memoized the function automatically. But I think it’s instructive to demonstrate the concept in pure Python.</p>
</section><section id="bash" class="level1"><h1>Bash</h1>
<p>Speaking of elegance, we’ll now consider a language about as elegant as an <a href="https://en.wikipedia.org/wiki/Fairchild_Republic_A-10_Thunderbolt_II">A-10</a>: Bash. Bash is designed for interactively managing filesystems and operating systems, or writing scripts that do the same thing. Its syntax isn’t pretty, but it’s brutally effective in its role.</p>
<p>But this pattern can’t be implemented in Bash, so far as I know. Bash is dynamically scoped, not lexically scoped. That means a function that fails to find a variable in its local scope will next look in its <em>caller</em>’s scope, then the caller’s caller’s scope, and so on, instead of the scope where it was defined. If we tried to implement a Python-style <code>neighbors</code> in Bash like this:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode sh source code-with-copy"><code class="sourceCode bash"><span id="cb9-1"></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">neighbors()</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">declare</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-A</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">memo</span></span>
<span id="cb9-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">local</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'get_neighbors(){</span></span>
<span id="cb9-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    local x="$1"</span></span>
<span id="cb9-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    local y="$2"</span></span>
<span id="cb9-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    local hash = "$x,$y"</span></span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    if [ ! -v memo["$hash"] ]; then</span></span>
<span id="cb9-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        local west="$(($x-1)),$y"</span></span>
<span id="cb9-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        local east="$(($x+1)),$y"</span></span>
<span id="cb9-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        local south="$x,$(($y -1))"</span></span>
<span id="cb9-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        local north="$x,$(($y +1))"</span></span>
<span id="cb9-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">        memo+=(["$hash"]="$north-$east-$south-$west")</span></span>
<span id="cb9-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    fi</span></span>
<span id="cb9-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}'</span></span>
<span id="cb9-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">exec</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$code</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb9-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
<p>the function it returned (to be exact, the function generated by the code string it evaluated ) would not “remember” the <code>memo</code> array, because bindings in the scope where the array was defined would not be preserved. Even if we ignore that fact, Bash is a bad choice for this problem because it doesn’t support multidimensional arrays, so I had to resort to some ugly code to represent the coordinates as a string. Bash is indispensable in many situations, but not this one.</p>
</section><section id="lua" class="level1"><h1>Lua</h1>
<p>Lua is a fast, lightweight scripting language. Though its design is minimalist, with simple syntax and few data structures, it does support lexical scope, enabling the usual functional programming tricks.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode lua source code-with-copy"><code class="sourceCode lua"><span id="cb10-1">present_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-2">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb10-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> tab <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ipairs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">do</span></span>
<span id="cb10-4">        result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table.concat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>tab<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"}"</span></span>
<span id="cb10-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table.concat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">", "</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"}"</span></span>
<span id="cb10-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb10-8"></span>
<span id="cb10-9">neighbors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb10-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">local</span> memo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb10-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-12">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">local</span> hash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table.concat</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> memo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>hash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">nil</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">then</span></span>
<span id="cb10-14">            memo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>hash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-15">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb10-16">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb10-17">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb10-18">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">],</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb10-19">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb10-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> memo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>hash<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb10-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">end</span></span>
<span id="cb10-24"></span>
<span id="cb10-25">get_neighbors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> neighbors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">()</span></span>
<span id="cb10-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>present_table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>get_neighbors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">({</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">})))</span></span>
<span id="cb10-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>present_table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>get_neighbors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">({</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">})))</span></span>
<span id="cb10-28"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>present_table<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>get_neighbors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">({</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">})))</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- {{1, 3}, {3, 3}, {2, 2}, {2, 4}}
-- {{0, 4}, {2, 4}, {1, 3}, {1, 5}}
-- {{1, 3}, {3, 3}, {2, 2}, {2, 4}}</code></pre>
</div>
</div>
<p>Lua automatically finds the <code>memo</code> table (what Lua calls its all-purpose record data structure) in the enclosing scope and modifies it. I had to write my own function to print tables, however, because Lua only prints a table’s memory address by default. The only other wrinkle is that Lua makes variables global <em>by default</em>. You have to use the <code>local</code> keyword to bind variables in a function’s execution scope (or make them local to a script). Since creating global variables from functions is usually a bad idea, I think it should be the other way around, as in Python, but that’s a matter of preference.</p>
<p>This snippet demonstrates another neat feature of Lua: looking up a nonexistent table index or unbound variable returns <code>nil</code> instead of an error, making it safe to test for index existence.</p>
</section><section id="javascript" class="level1"><h1>JavaScript</h1>
<p>Like Bash, JavaScript is respected for its usefulness and ubiquity rather than its elegance. Say what you will about JavaScript’s loose typing, design inconsistencies, and erratic syntax, it isn’t Python that powers the modern Web.</p>
<p>As in Lua, there’s no need to use special syntax to write in the enclosing scope. But I do have to use JavaScript’s declaration keywords, which have characteristically intricate rules. I need to use <code>let</code> inside the function instead of <code>const</code> to avoid creating global variables; <code>var</code> has yet another assignment behavior. Still, it’s easy enough to express the functional idiom:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode js source code-with-copy"><code class="sourceCode javascript"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">neighbors</span>(){</span>
<span id="cb12-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> memo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-3"></span>
<span id="cb12-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x){</span>
<span id="cb12-5">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">let</span> hash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toString</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>(hash <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> memo)){</span>
<span id="cb12-7">            memo[hash] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-8">            [x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-9">            [x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-10">            [x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-11">        }</span>
<span id="cb12-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> memo[hash]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-13">    }</span>
<span id="cb12-14">}</span>
<span id="cb12-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">const</span> get_neighbors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">neighbors</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_neighbors</span>([ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> ]))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_neighbors</span>([ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> ]))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">console</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_neighbors</span>([ <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> ]))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [ [ 1, 3 ], [ 3, 3 ], [ 2, 2 ], [ 2, 4 ] ]
-- [ [ 0, 4 ], [ 2, 4 ], [ 1, 3 ], [ 1, 5 ] ]
-- [ [ 1, 3 ], [ 3, 3 ], [ 2, 2 ], [ 2, 4 ] ]</code></pre>
</div>
</div>
</section><section id="sql" class="level1"><h1>SQL</h1>
<p>Surprisingly, SQL provides the most elegant interface for functional programming. Strange as it sounds, its expressive, if finicky, declarative syntax enables powerful idioms. With creative use of <code>GROUP BY</code> clauses and certain window functions, it is possible to -</p>
<p>Just kidding. But it probably is possible, albeit silly, to implement <code>neighbors</code> in procedural SQL.</p>
</section><section id="r" class="level1"><h1>R</h1>
<p>As in many things, I’m biased toward R because it was my first language. But I think R wins this comparison on the merits.</p>
<p>R has the most elegant solution to writing in the enclosing environment. The regular assignment operator, <code>&lt;-</code>, only ever binds in its caller environment (and yes, it technically is a function, so it’s correct to speak of its caller environment). Instead, R implements assignment in enclosing environments using a _super_assignment operator, <code>&lt;&lt;-</code>. (In R, environments are first-class objects that record their parent environments). This operator checks the parent of the caller environment for a binding with the same name as the one being used, and overwrites that binding if it exists. If the name is not bound in the parent environment, it repeats this process for each parent of that environment, and finally binds the name in the global environment if it is not defined anywhere.</p>
<p>This power can be used for evil, as in this snippet that modifies a global variable:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 5</code></pre>
</div>
</div>
<p>Or for good, as in this version of <code>neighbors</code>. It works because closures, the type R uses to implement most functions, record the environment where they were defined.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">neighbors</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">memo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/environment.html">new.env</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>hash <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hash</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/paste.html">paste</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/character.html">as.character</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, collapse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/conditions.html">tryCatch</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/get.html">get</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hash</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">memo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">e</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">memo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">hash</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span>
      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span>
    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">get_neighbors</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">neighbors</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_neighbors</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [[1]]
-- [1] 1 3
-- 
-- [[2]]
-- [1] 3 3
-- 
-- [[3]]
-- [1] 2 2
-- 
-- [[4]]
-- [1] 2 4</code></pre>
</div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_neighbors</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [[1]]
-- [1] 0 4
-- 
-- [[2]]
-- [1] 2 4
-- 
-- [[3]]
-- [1] 1 3
-- 
-- [[4]]
-- [1] 1 5</code></pre>
</div>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_neighbors</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [[1]]
-- [1] 1 3
-- 
-- [[2]]
-- [1] 3 3
-- 
-- [[3]]
-- [1] 2 2
-- 
-- [[4]]
-- [1] 2 4</code></pre>
</div>
</div>
<p>Notice how <code>&lt;&lt;-</code> still works correctly, even embedded in an anonymous function passed as an error handler to <code>tryCatch</code>. The one annoyance is that numeric vectors can’t be used as names.</p>
</section><section id="conclusion" class="level1"><h1>Conclusion</h1>
<p>At the end of the day, broad techniques like memoization transcend any individual language. All the languages above (except Bash) make it relatively easy to use memoization. As with most programming concepts, translating the principles into any given language is much easier than understanding them in the first place. Still, the comparison here highlighted each language’s character: Python’s explicitness, Lua’s simplicity, and R’s lovable blend of elegance and jankiness. (Also worth noting: the languages featured each call their associative data structure something different).</p>
<p>I like R’s approach best. A special version of the assignment operator clearly signals that something unusual is being done, and it is visually distinct yet hard to type by accident. (RStudio, the premier R IDE, has a keyboard shortcut for <code>&lt;-</code> that makes mistakenly typing <code>&lt;&lt;-</code> very unlikely). But which is your favorite?</p>


<!-- -->

</section> ]]></description>
  <guid>https://ryan-heslin.github.io/posts/lexical-scope/index.html</guid>
  <pubDate>Wed, 18 Jan 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Reflections on Advent of Code 2022</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/aoc-2022/index.html</link>
  <description><![CDATA[ <!-- ```{sh} --><!-- [ -f 'line_counts.csv' ] || ../../scripts/count_all_repos.sh ../..'/data/line_counts.csv' --><!-- ``` --><section id="overview" class="level1"><h1>Overview</h1>
<p><a href="https://adventofcode.com/2022">Advent of Code 2022</a> is over. After a few frantic weeks, I’ve completed both parts of all 25 puzzles. And, like most years, it was a wild ride, full of frustration and triumph in equal measure. Eric Wastl and his team have once again delivered. When I wasn’t coding, I was scanning documentation or trawling the <a href="https://www.reddit.com/r/adventofcode/">subreddit</a> for hints. To my surprise, I managed to finish the whole calendar before the New Year. The year felt a little easier than 2021, though of course I have much more experience than I did then.</p>
<p>This year’s narrative had the player assisting the Elves’ expedition deep into the jungle, in search of a rare fruit that powers the reindeer’s flight. This premise has lower stakes than past years, which had you scrambling to prevent some catastrophe from ruining Christmas, but the change of pace is welcome.</p>
<p>We all know the plot is just a device to string puzzle premises together, but I make special note of it because I think it’s the secret to Advent of Code’s popularity. Problems are just more enjoyable when framed by a silly scenario. “Find the path on this unidirected graph maximizing this dynamic weighting function” is a work specification; “Find which valves to open release as much pressure as possible so you and the herd of elephants following you can escape the erupting volcano” is <em>fun</em>.</p>
<p>(One other amusing consequence of the narrative: if you follow the common style advice to name variables and functions in terms of the problem you are modeling, your code will teem with names like <code>ModulusMonkey</code> and <code>nearest_elf</code>).</p>
<p>I set out to use as many languages as possible, even those I lacked confidence in. For the first week or so, I found this easier than expected. Even JavaScript, which I hadn’t used seriously in a long time, I found simple enough to use. But it couldn’t last. As the puzzles got tougher past day 10 or so, I found myself retreating to the familiarity of Python. Maybe I’ll do better in this regard next year.</p>
<p>Here’s a plot showing my choice of language for each day with the cumulative line count:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">source_env</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/environment.html">new.env</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">source_env</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">years</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">source_env</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">csv</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../../data/line_counts.csv"</span>
<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/source.html">source</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../../scripts/plot_lines.R"</span>, local <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">source_env</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://ryan-heslin.github.io/posts/aoc-2022/index_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
</section><section id="methods" class="level1"><h1>Methods</h1>
<p>If this year had a theme, it was <a href="https://en.wikipedia.org/wiki/Cartesian_coordinate_system">Cartesian coordinates</a>. They show up in at least a few puzzles each year, but they showed up again and again this year. The concept often appeared with a clever twist, such as modeling falling shapes (day 17) or computing three-dimensional surface areas (day 18).</p>
<p>For these types of problems, I like to use a sparse map that stores only coordinates that matter for the problem. For day 18, for example, this was coordinates covered by a falling shape. I once used tuples to represent even two-dimensional coordinates, but now I use a tried-and-true hack: complex numbers. Not only is this trick effective, it gives me the guilty thrill of using a workaround it would be reckless to use in production code.</p>
<p>As always, a few problems frustrated me. Day 9 caught me off guard. It’s tricky, but nothing terrible: each knot on the rope follows simple movement rules that you can infer by studying the example input. Instead, I developed a complicated solution for part 1 that wouldn’t generalize to part 2. The problem became easy when I took a break and realized all I had to do was keep each knot adjacent to its leading knot.</p>
<p>Day 11 stymied me for a different reason: it could be solved a simple trick that I <em>just couldn’t see</em>. Part 2 introduces a rule change that allows certain values to grow without bound. You have to recognize that they follow a cycle whose period is the lowest common multiple of divisors specified in the problem, then modulo divide by that value. This isn’t too hard to figure out, but I missed it because I attacked the problem without thinking it through. I ended up finding the correct method only after trying almost everything else. A little number theory would have saved me a lot of trouble.</p>
<p>I also got badly stuck on day 16, but that one was horrible for everyone, so there’s nothing to analyze.</p>
</section><section id="difficulty" class="level1"><h1>Difficulty</h1>
<p>I think the puzzle design this year was perhaps the best yet. Many puzzles were hard, some very hard, but none were complicated. I think good puzzles test two things: modeling the important features of a problem and to to adapting a standard algorithm to a novel situation. Those with complicated rules introduce an additional challenge: correctly implementing every detail of the specification. This rewards diligence more than insight and means even tiny mistakes will yield the wrong answer. Complication isn’t _unfair per se, and most real software specifications are very complicated. But few people consider attending to minutiae the best part of programming; consider the mixed reception to <a href="https://adventofcode.com/2018/day/15">2018 day 15</a>, which I’m not even brave enough to attempt.</p>
<p>This year, the hard puzzles were hard because a straightforward approach could not solve them. Days 16 and 19, probably the hardest, presented tough pathfinding scenarios. You had to wrangle each input into a graph structure (possibly implicit), then find a way to reduce the problem space to a manageable size that <a href="https://xkcd.com/2407/">brepth-first search</a> could handle. Without some clever optimization, any solution would probably take much too long Both tasks involve lateral thinking and creativity; implementing Wikipedia’s Dijkstra pseudocode wouldn’t cut it. Some puzzles involved simulation, but not with complicated rules; the difficulty instead came from understanding the subtleties in the interaction of simple rules (e.g., Day 9). Overall, the puzzles have become leaner but no less challenging. I appreciate the work it must have taken to refine a successful formula and make it still better.</p>
<p>I also encountered, or implemented for the first time, several other useful techniques: cycle detection, bit-encoding subsets, flood-filling, and more. I never come out of a year without at least a few new tricks.</p>
<p>My favorite puzzle was day 21. I solved it in R. Part 1 is fairly simple, requiring you to parse and evaluate a large expression recursively. Part 2 introduces a nasty escalation: one of the names referenced in the expression (the one labeled “humn”, naturally, since the others refer to monkeys) is bound to an <em>unknown</em> value, not a constant, and you have to solve for it.</p>
<p>I’ve always liked expression manipulation. R, with its strong LISP influence, makes it easy to convert between R code, objects representing the code’s <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">abstract syntax tree</a>, and <a href="https://en.wikipedia.org/wiki/S-expression">S-expression-like</a> lists of functions and arguments. So I attacked part 2 by converting the equation to be solved into a nested list of S-expressions. Since the right side of the equation resolved to a constant, I could solve it by simply inverting each operation on the left-hand side until I had isolated the unknown. I learned later that several other approaches worked well, such as finding the solution by binary search or using complex-number hackery. It was fun and rewarding to work through, and the part 2 twist is a classic.</p>
</section><section id="closing-thoughts" class="level1"><h1>Closing Thoughts</h1>
<p>Overall, it was a fun and rewarding year, and I’m mostly pleased with my performance. I approached puzzles strategically instead of instinctively. I mostly picked the right data structures, and avoided overengineering my solutions. I knew enough about pathfinding algorithms to get through the tougher puzzles. Don’t get me wrong: I’m a long way from the people who can crank out an idiomatic Python solution that runs in 50 microseconds any given day. But I’m improving, and that pleases me.</p>
<p>I had better learn the <a href="https://en.wikipedia.org/wiki/Chinese_remainder_theorem">Chinese Remainder Theorem</a> before December 2023, though. Can’t be too hard, right?</p>


<!-- -->

</section> ]]></description>
  <category>R</category>
  <guid>https://ryan-heslin.github.io/posts/aoc-2022/index.html</guid>
  <pubDate>Sat, 31 Dec 2022 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Why I Use Neovim</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/use-neovim/index.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Right now, I do almost all my writing and programming using Neovim. It’s not a typical choice for R users, who largely use RStudio, an excellent R-specialized IDE. I started with RStudio, but moved to Neovim after a bit more than a year, for reasons I’ll explain below.</p>
<p>My experience with Neovim was overdue for a full-length post. I spend most of each working day using it, and I’ve devoted much of my free time to maintaining and improving my setup. More than any of my other projects, it reflects my interests and creative abilities. So I’ll start from the beginning and describe the long, strange journey that brought me here.</p>
</section>
<section id="taking-the-plunge" class="level1">
<h1>Taking the Plunge</h1>
<p>I first encountered Vim through MIT’s <a href="https://missing.csail.mit.edu/2020/editors/">Missing Semester</a>, a free online course in programming tools. One of those tools was <a href="https://www.vim.org/">Vim</a>. Vim is a free text editor, developed and maintained since 1991 by Bram Moolenar. I had no experience with it, but knew it by reputation: very powerful and very hard to learn. I also considered Vim’s main competitor, <a href="https://www.gnu.org/software/emacs/">Emacs</a>, another free text editor with an equally distinguished history and a very different design philosophy. “Nemesis” might be a better word: partisans of each editor have spent the last three decades arguing about which is better. At the time, I was neutral in that endless conflict, but I decided to try using Vim. With practice, Vim was supposed to make you much more productive, and who wouldn’t want that?</p>
<p>So I installed Vim and fumbled my way through Vimtutor, the built-in tutorial mode that demonstrates basic motion and editing commands. (If you’re new to Vim, activate it with <code>:Tutor</code>). Then I tried doing my usual work in Vim. It went poorly. Using Vim for the first time feels like a nightmare. The complex, unfamiliar interface paralyzes you; even moving is hard. You try to escape, desperate to return to the familiarity of your old editor. You try every key combination you can think of, but nothing works; even quitting is a challenge. The experience is almost enough to scare you off from trying again</p>
<p>A gentler introduction was necessary, I concluded. So I returned to my usual IDE, <a href="https://posit.co/products/open-source/rstudio/">RStudio</a>. RStudio delivers first-rate support for R coding, but it also has an unusually good set of Vim keybindings. So I turned them on and forced myself to use them. It was hard at first, but before long I got the hang of the commands. As I learned to delete whole words, move lines, and change visual selections, my productivity began to improve. But soon I craved more power than the keybindings gave me. I couldn’t execute complex commands or use Vim’s powerful regex implementation, because I was really just using a Vim-like interface for RStudio. I needed the real thing.</p>
<p>That meant finding a plugin (what Vim calls user-created extensions) that supported an R REPL like RStudio’s. I settled on <a href="https://github.com/jalvesaq/Nvim-R">Nvim-R</a>, which I still use. But Nvim-R was not designed for compatibility with Vim. Instead, it required a <em>variant</em> of Vim: <a href="https://neovim.io/">Neovim</a>. Neovim, I learned, was a relatively new fork of Vim, promising an improved API, web embedding, Lua support, and other features that sounded exciting, though I hardly understood them Almost all Vim features were supported, but it implemented them by a different approach software.</p>
<p>I tried setting up Neovim on my Windows machine, but I could not get it to work properly. It is possible to run Neovim on Windows machines, but I became so annoyed trying and failing to configure it that I turned to radical measures. It would be easier just to set up Neovim on a non-Windows machine, and the simplest way to do that was to install a virtual machine on my physical PC and then install Neovim there. So I downloaded <a href="https://www.virtualbox.org/">VirtualBox</a> and fumbled my way through setting up an Ubuntu VM, choosing Ubuntu for its reputation as the most noob-friendly Linux distribution. I had no clue what I was doing, but somehow I got everything configured correctly.</p>
</section>
<section id="fun-and-games" class="level1">
<h1>Fun and Games</h1>
<p>Over the next few months, I slowly came to grips with my new editor. I installed the R packages I needed and got an R REPL working. I got a basic language server running, too, mostly by blindly copying from the <a href="https://github.com/neovim/nvim-lspconfig">relevant plugin</a>. (My current configuration, in sharp contrast, largely consists of <em>judicious</em> copying from the plugin). I kept practicing the Vim motions, trying to avoid anti-patterns like using the arrow keys, until they became familiar. It was hard going. Many times, something would break and send me back to RStudio. But I persevered and began expanding my configuration to new languages, such as Python and Lua. In time, my original workflow seemed as alien as this new one once had.</p>
<p>With time, Vim’s interface becomes familiar, then indispensable. Once the motion commands become muscle memory, it becomes easy to execute even complex movements in just a few keystrokes. You decide what to do - say, “go three lines down, jump to the end of the sentence, go back two words, and yank eveything inside the parentheses” - and express it (<code>3j)2byi(</code>). The interface is fast, versatile, and useful for all kinds of text editing. Going back to the vim keybindings available in other editors feels like drinking diet soda instead of the regular kind - a passable imitation, but clearly not the real thing.</p>
<p>Neovim is making the classic system even more powerful by integrating <a href="https://tree-sitter.github.io/tree-sitter/">TreeSitter</a>, a program that parses the <a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a> of code in various languages. This makes it possible to use elements of language grammar as a basis of motion: you can select the expressions inside a function definition, or advance to the next branch of an <code>if-else</code> block.</p>
<p>One of Neovim’s headline features is a Lua API for VimScript, the specialized language Moolenar created for modifying and extending Vim. Vimscript does that job well enough, but is full of idiosyncrasies and has no applications outside Vim. I spent a little time learning it, but found it hard going. Lua, by contrast, was a joy to program in. Python is often billed as “interpretable pseudocode,” but I think <a href="https://www.lua.org/">Lua</a> comes even closer to that ideal. (Well, at least JIT-compiled pseudocode). I found that its minimalist design and simple syntax ideally suited to customizing Neovim’s behavior. I had to stop myself from writing functions in my configuration files to solve interesting problems I encountered. The basic limits on Neovim’s capabilities, I came to realize, were not any design constraints, but my own programming skill and imagination.</p>
</section>
<section id="taking-stock" class="level1">
<h1>Taking Stock</h1>
<p>My decision to try a new editor had escalated into a months-long quest to create a new working environment and customize my workflow. Put that way, it seemed almost absurd, as if I had resolved to go running on weekends and ended up becoming a semi-pro triathlete. It had been fun, it had been frustrating, it had been an irresponsible use of time I should have devoted to planning my career, and I could not honestly say I regretted any of it. Nor was it wholly wasted. Without really intending to, I had learned a complex API and used it to write useful code. I almost completely replaced my old GUI-based workflow with the terminal. And Vim itself has its uses. In my last semester, I found myself, as practically every programmer has at some point, working on a mysterious server via SSH, with no access to my usual editor. I typed <code>which vim</code> hopefully, and had all I needed.</p>
<p>Vim really did improve my productivity, I concluded. Using the fluid motion commands, powerful support for linewise transformations, and ease of integration with other shell tools, I could quickly carry out tasks I wouldn’t have even thought to attempt with a conventional IDE. The feeling is intoxicating - in fact, too intoxicating. After a few months, I came to another realization: I spent much more time editing my configuration than I saved using it to do actual work. I am the type who would rather spend an hour finding an interesting way to automate a boring task than ten minutes actually doing it. And if that’s procrastination, isn’t it the same impulse that spurs us to invent new technologies? You be the judge.</p>
</section>
<section id="aside-should-i-have-gone-with-emacs" class="level1">
<h1>Aside: Should I Have Gone with Emacs?</h1>
<p>The idea isn’t ridiculous. I know little of Emacs, but I have heard it described as even more versatile and configurable than Vim. I think Vim’s interface for text editing is superior (and so do a good number of Emacs users, considering the popularity of <a href="https://github.com/emacs-evil/evil">EVIL mode</a>), but Emacs might have allowed me to indulge my configuration addiction even more shamelessly than Neovim. And, just as a McDonald’s manager would probably concede that Burger King’s onion rings are better, I have to admit that writing Emacs Lisp sounds more appealing than Lua-interfaced Vimscript. But I had to pick one editor, and I can’t say I regret my choice.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>As I write this, I’m toying with five or six half-formed ideas for improving my Neovim configuration, some of which I might actually get around to implementing. It’s strangely reassuring to have a project I can never finish. Of course, getting too attached to my elaborate configuration might prevent me from jumping ship if an even better editor appeared. But if this unending adventure has taught me anything, it’s that adopting superior tools, striving to master them, and customizing them to your heart’s content is worth the investment. Still, for now, I’m happy where I am.</p>


<!-- -->

</section>

 ]]></description>
  <category>Neovim</category>
  <guid>https://ryan-heslin.github.io/posts/use-neovim/index.html</guid>
  <pubDate>Sun, 04 Dec 2022 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Is R Hard to Learn?</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/hard-to-learn/index.html</link>
  <description><![CDATA[ 




<p>R has something of a reputation for being hard to learn. <a href="https://r4stats.com/articles/why-r-is-hard-to-learn/">Many</a> have speculated about the reasons why. With the possible exception of C, I can’t think of another language widely regarded in the same way. R is pointer-free (at least at the user level) and has much more forgiving typing, so why the similarly bad reputation?</p>
<p>I think there is some truth to these claims: some features of R do make it unusually daunting for beginners. But the more important reason is that people often must learn R with little support or without much knowledge of programming. Learning the first language is hard; tutorials or teachers that present it the wrong way make it even harder.</p>
<p>While I have extensive experience working with R beginners, I have no hard data, and speak as a mostly self-taught programmer. So tune your skepticism level accordingly.</p>
<section id="my-own-experience" class="level1">
<h1>My Own Experience</h1>
<p>R was the first programming language I learned seriously. I learned some Java many years earlier in computer science class in high school, and a little Python from a college course, but in neither case did I set out to master the language and use it in my career. When I began learning R in early 2020, I planned to become a policy analyst after grad school; knowing a programming language would give me an advantage in that field. I considered learning Python instead, but I decided on R after maybe two minutes of thought because it had a reputation for being hard to learn, and I wanted a challenge.</p>
<p>I had no idea what I was getting into, of course. I dived into a too-advanced tutorial that used <code>tidyverse</code> without even comprehending the difference between it and R itself. (I believe it’s <a href="https://datacarpentry.org/r-socialsci/03-dplyr-tidyr/index.html">this one</a>, though back then it used an older version of the <code>tidyverse</code> API). I gave up after a few hours, hopelessly confused. Further attempts went no better. I decided programming was beyond me, and put R aside.</p>
<p>Then, in the surreal early months of the pandemic, I returned to it. I worked through different tutorials, this time going more slowly this time and no longer expecting rapid progress. (Would I have given up for good if the pandemic had not unexpectedly afforded me months of free time? Perhaps.) Intrigued by R’s plotting capabilities, I started making visualizations of pandemic-related data. (It was hard to think of anything else; the circumstances had not yet come to feel normal). As I began to encounter nontrivial problems, I realized enjoyed working through them. I remember spending hours fussing over a regular expression to extract county names from a column, or trying to transform data frames so I could plot them properly. (This was in the <code>gather</code>-<code>spread</code> days, so it was not easy!).</p>
<p>I would not recommend this awkward, roundabout approach to learning the language, but a few months of it made me a competent user by the time grad school began, giving me a foundation to build on when I tackled more advanced topics.</p>
</section>
<section id="my-theory" class="level1">
<h1>My Theory</h1>
<p>Would the learning process have been easier had I chosen Python? Some aspects of R do make it harder to learn than comparable languages. One reason is that in R, unlike in Python, there is never one right way to do something. R comes with so many powerful functions (perhaps too many) that even simple problems can reasonably solved in many different ways. Veteran R users treasure this expressiveness, but it makes the learner’s task harder. How can you learn the way to do something when there <em>is</em> no one way to do it? When the repurposed StackOverflow solutions you patch together use different idioms whose merits you lack the knowledge to compare? When tutorials give contradictory advice? Only through experience, and there are no shortcuts to that.</p>
<p>Another cause is R’s well-known inconsistencies and quirks, which I have discussed before. Its often unfriendly error messages, like the infamous “improper subset of object of type closure”, make working through obstacles harder than necessary.</p>
<p>But I suspect the main reason for the perceived difficulty lies not in the language itself, but in the circumstances of the learning. Effective programming takes particular skills, and R learners are unlikely to have had the experiences that develop them.</p>
<p>Writing code demands a kind of focused aggression. You start (or should) by devising a plan to achieve a technical goal. As you execute it by writing, modifying, and testing code, you quickly run into unexpected obstacles: confusing error messages, problems in code construction you can’t immediately solve, and perhaps changing requirements. You fight your way through, skimming documentation or StackOverflow for advice and experimenting with code. The experience tests your knowledge of the language and ability to analyze, but also your resourcefulness and determination. With sometimes painful experience, you develop the capacity to resolve errors relatively quickly, strong attention to detail, a knack for avoiding problems that stymied you in the past, and above all the will to persevere and turn half-formed ideas into useful code.</p>
<p>But developing these abilities takes time and effort, and they don’t make you immune to frustration. I write this on a Friday, having spent much of the week trying to do a programming assignment in <a href="https://racket-lang.org/">Racket</a>, a language new to me. I spent more hours than I’d like to admit struggling with the syntax until suddenly, unaccountably, it started to make sense. Even though I had more than two years of experience and knew Racket had <em>simpler</em> syntax rules than most languages, it took time before I could write and read it fluently.</p>
<p>The problem is that many, if not most, R learners have yet to make that effort, because they are new to programming. Think of an undergrad social science student taking a methods course, or a data analyst accustomed to Excel or SAS learning a new tool for their job. Learners of this kind have little or no programming experience or computer science education. The routine I described above is completely foreign to the first group. While the second group might have experience solving technical problems in their tool of choice, they do not know the idiom of a true programming language. So asking them to write nontrivial code is like throwing raw recruits into combat without sending them through basic training. Knowing this, designers of computer science programs typically start the major off with a “how to code” class that gently introduces naive students to programming (and typically in a general-purpose language like Python, not a specialized one like R). Learning from the ground up without that kind of instruction, or at least a knowledgeable mentor, is far harder - and impossible without strong motivation.</p>
<p>Nor are they likely to know that making frequent errors is <em>normal</em>. For novices, unused to a programming language’s demands for absolute correctness, the early weeks can feel like an endless stream of mistakes: misspelled variable names, dangling parentheses, incorrect function calls. Even experienced programmers slip up now and again (literally two minutes before I wrote this, I lost points on an assignment submission because I put an extra letter in the name of a required function). For newcomers, even writing correct syntax is taxing. If not instructed otherwise, or exposed to people having the same problem, many will start to think, as I once did, <em>it means something is wrong with them</em>.</p>
<p>In short, compared to other languages, the people asked to learn R are unusually likely to lack the background and support that make learning a new language relatively painless. It’s no wonder, then, that R has become known for being “hard to learn.”</p>
</section>
<section id="the-implications" class="level1">
<h1>The Implications</h1>
<p>This reputation threatens the language’s future. Being “hard to learn” can discourage enterprises an educators from using R or scare people away from trying to learn it themselves. Over time, as competitors like Python make usability improvements, R might decline in popularity if it fails to do the same. The situation is hardly desperate. There are almost embarrassingly many free tutorials available. The <a href="https://swirlstats.com/">swirl</a> package provides interactive lessons. Thousands of package developers, not to mention R core, work hard to improve existing interfaces and root out bugs.<br>
But all of us who are experienced in R have a part to play. We can assist novices who come to us for help or advice, strive to write high-quality code ourselves, and above all remember that it was once very hard for us, too.</p>
<p>(Caveat to all the above: a cursory search didn’t find any research comparing the difficulty of learning of different languages. I would be interested to read any if it existed, since I have no hard data to support or disprove my claims).</p>
<p>So if you’re just starting out with R? Don’t go too fast or expect instant comprehension. Find an interesting problem you think you can solve to keep up your motivation. Have faith that your skills will improve with practice. Publish your code in some form, to seek feedback and demonstrate your growing proficiency. View your work as a creative outlet and an opportunity to refine your skill in solving problems. You don’t have to like it, or even programming in general, but there’s a good chance you’ll find you do.</p>


<!-- -->

</section>

 ]]></description>
  <category>R</category>
  <guid>https://ryan-heslin.github.io/posts/hard-to-learn/index.html</guid>
  <pubDate>Sat, 15 Oct 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>What I Wish I’d Known Going into Advent of Code</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/aoc_advice/index.html</link>
  <description><![CDATA[ 




<p>You’ve probably guessed by now that I really like <a href="https://adventofcode.com/">Advent of Code</a>, Eric Wastl’s annual collection of Christmas-themed programming puzzles. Even ignoring the puzzles, the experience is alluring. The silly but surprisingly elaborate narrative tying the puzzles together, the burgeoning community, the steady increase in difficulty, and the soothing blue-and-gold design of the site all combine to make the event something special. But the puzzles are the main event, so you ought to know something about them before diving in.</p>
<p>With a hundred-odd stars across three years, I thought I’d offer some advice.</p>
<p>To have an enjoyable experience, I don’t think you need anything more than familiarity with at least one programming language. You certainly don’t need formal computer science education, knowledge of math theory, or any experience with competitive programming, though all those things are helpful. You just need to know how to take a problem statement, come up with a plan to solve it, and translate that plan into code. None of that is easy, but Advent of Code is a great way to practice.</p>
<p>Here are some less obvious pointers.</p>
<p><em>Be absolutely sure you understand what is being asked.</em></p>
<p>Puzzles often contain complicated rules with subtle but important edge cases. The text is usually careful to note these; if not, they often appear in the examples provided. Still, Wastl has remarked that, for any given sentence of the puzzle text, there is always at least one player who ignores it, to their cost. More times than I can count, I’ve missed some crucial nuance and wasted time on unworkable solutions. Don’t be like me. Don’t start solving a puzzle until you’ve resolved all your questions about how you should interpret the input, and remember that an extra minute spent skimming the puzzle text could save you an hour of fruitless coding.</p>
<p><em>Resist the temptation to pre-solve the second part.</em></p>
<p><em>I’d better make this code robust to handle the second part,</em> you tell yourself. <em>I’ll look so clever when I solve it just by tweaking a parameter in my solution to the first part!</em> Stop right there. The whole point of the second part is that you <em>can’t</em> plan for it. It could take any one of dozens of forms. It might ask you to find the highest of something instead of the lowest, remove a constraint that made the problem simpler, impose a new constraint that makes it more complicated, or even require you to use the input in a completely different way than the first part. Beyond wrapping your code in functions or classes you can reuse, you can’t prepare for all these scenarios, and you’ll only waste time if you try.</p>
<p>The exception is puzzles whose first parts tell you to ignore some part of the input. In that case, the second part is all but certain to use the full input, and the increase in scale could well break a naive but inefficient algorithm that works on the first part.</p>
<p><em>Look out for some recurring themes</em></p>
<p>175 puzzles in, Wastl still manages to avoid merely recycling old ones. But naturally, the same kinds of problem crop up again and again, albeit always with a fresh variation or two. In any given year, expect to see at least one appearance each of the following:</p>
<ul>
<li>Evaluating and parsing a made-up <a href="https://en.wikipedia.org/wiki/Assembly_language">assembly language</a></li>
<li>Finding the shortest path between a certain pair of nodes on a <a href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a></li>
<li>String manipulation, possibly involving <a href="https://en.wikipedia.org/wiki/Regular_expression">regular expressions</a></li>
<li>Some application of <a href="https://en.wikipedia.org/wiki/Combinatorics">combinatorics</a></li>
<li>A variation on <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway’s game of life</a></li>
</ul>
<p>Puzzles become a lot less daunting when you recognize them as new twists on familiar concepts. Moreover, these are all well-studied problems in computer science, so you can easily find advice or pseudocode for useful algorithms if you get stuck.</p>
<p><em>Be lazy.</em></p>
<p>Efficient code does as little work as possible. Advent of Code doesn’t expect you to aggressively optimize your code, but it does reward you for finding clever ways to avoid unnecessary computations. If you’re trying combinations of values to look for the answer, for instance, you can greatly speed up your code if you find an easy way to ignore combinations that can’t possibly yield the right answer. In a similar vein, resist the urge to just simulate a puzzle that asks for the outcome of a game or process. If you can think of a way to compute the answer directly, your code will probably run much faster. And beware: some puzzles require it. I’ve come across a few where a naive algorithm worked on the first part, but the second part changed the rules so a non-optimized approach became hopelessly slow.</p>
<p>Advent of Code isn’t intended to require dirty optimization hacks, but it does test your ability to think of subtler approaches than brute force.</p>
<p><em>Don’t make it into work.</em></p>
<p>Advent of Code is, above all, fun - a chance to write code that solves silly problems about made-up Yuletide adventures. Of course, it’s also an opportunity to practice writing good code to diverse and difficult specifications, but that’s secondary. Don’t stress about efficiency, style, or refactoring; nobody is going to hound you for breaking code quality guidelines on Christmas puzzles.</p>
<p>And if you get stuck, do something else for awhile - you’ll get that star eventually. It’s not a sign you’re dumb or bad at coding; the puzzles are devised by a clever software engineer to challenge an audience largely composed of software engineers, after all. (That doesn’t mean <em>I’m</em> not dumb, mind you - you just have to look elsewhere for proof of that assertion).</p>
<p>If you’re unsure whether to take part, just give it a try. I did, and the experience spurred me to learn new languages and start thinking seriously about the code I wrote. The first puzzle of each year is usually simple, and you’re not obliged to continue if you don’t enjoy it. But if you do enjoy it, there’s no telling how far your newfound interest will carry you. I hope you found this advice useful, or at least entertaining. See you in December!</p>


<!-- -->


 ]]></description>
  <category>Advent of Code</category>
  <guid>https://ryan-heslin.github.io/posts/aoc_advice/index.html</guid>
  <pubDate>Sun, 25 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>The Data Science Language of the Future</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/next_language/index.html</link>
  <description><![CDATA[ <p>R, for all its warts, has most of the features I want from a data science language. It’s powerful, surprisingly versatile, and usually fun to use. But, like all languages, it is neither perfect nor likely to be widely used forever. (I doubt it will enjoy - if that is the right word - the endless afterlife of COBOL and its ilk). So I hope the (distant!) future will see statistical languages that replicate and refine R’s strengths while improving its weaknesses. What should those languages look like?</p>
<p>To discuss a next-generation language, we need to establish what makes R so great to begin with. On reflection, I identified three key ingredients:</p>
<ol type="1">
<li>
<em>Vector types and vectorized functions</em>. As John Chambers says, if it exists in R, it’s a vector. R doesn’t have any true scalar types; there are only vectors of varying lengths. The rationale is obvious: converting between scalar and vector types would add complexity for little gain, make analysis and data tidying a pain. Anyone who’s ever spent an hour deriving the ordinary least squares estimators by elementary algebra and calculus, and then done it in a few lines with linear algebra, will know what I mean.</li>
</ol>
<p>But vectorization has benefits beyond mathematical convenience. (For now, let’s use Hadley Wickham’s working definition of a vectorized function: <img src="https://latex.codecogs.com/png.latex?f(x%5B%5Bi%5D%5D)%20=%20f(x)%5B%5Bi%5D%5D">). It abstracts away the iteration involved in operations, freeing you to think of functions as acting on each element independently. This results in compact, readable code:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/paste.html">paste0</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">letters</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" is letter #"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/seq.html">seq_along</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">letters</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" of the alphabet"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>--  [1] "a is letter #1 of the alphabet" 
--  [2] "b is letter #2 of the alphabet" 
--  [3] "c is letter #3 of the alphabet" 
--  [4] "d is letter #4 of the alphabet" 
--  [5] "e is letter #5 of the alphabet" 
--  [6] "f is letter #6 of the alphabet" 
--  [7] "g is letter #7 of the alphabet" 
--  [8] "h is letter #8 of the alphabet" 
--  [9] "i is letter #9 of the alphabet" 
-- [10] "j is letter #10 of the alphabet"
-- [11] "k is letter #11 of the alphabet"
-- [12] "l is letter #12 of the alphabet"
-- [13] "m is letter #13 of the alphabet"
-- [14] "n is letter #14 of the alphabet"
-- [15] "o is letter #15 of the alphabet"
-- [16] "p is letter #16 of the alphabet"
-- [17] "q is letter #17 of the alphabet"
-- [18] "r is letter #18 of the alphabet"
-- [19] "s is letter #19 of the alphabet"
-- [20] "t is letter #20 of the alphabet"
-- [21] "u is letter #21 of the alphabet"
-- [22] "v is letter #22 of the alphabet"
-- [23] "w is letter #23 of the alphabet"
-- [24] "x is letter #24 of the alphabet"
-- [25] "y is letter #25 of the alphabet"
-- [26] "z is letter #26 of the alphabet"</code></pre>
</div>
</div>
<p>In base Python or most other languages, this would require a <code>for</code> loop that kept track of letters and indices, resulting in less readable code and a greater likelihood of mistakes. Better still, R features convenience functions like <code>colMeans</code> that operate at a higher level of abstraction: data frames or arrays, which are versatile generalizations of simple atomic vectors. These capabilities let you ignore implementation details of iteration and write nicely abstract code.</p>
<p>Vectorization is hardly unique to R, but I don’t know of another language<br>
as fundamentally vector-oriented. Our ideal successor language should emulate R in this area.</p>
<ol start="2" type="1">
<li><em>Expressive data manipulation</em></li>
</ol>
<p>Too often, the actual “science” of data science, like dessert after a big feast, is dwarfed by what came before: data tidying, missing value imputation, transformation, and<br>
everything else required to get messy input into a form that can be analyzed. If a data pipeline doesn’t exist, this can become far more daunting than the analysis itself. No language is better suited for the job than R. A skilled user can achieve even elaborate transformations in ten or twenty lines. With practice, the feeling of power becomes almost addictive. Using another language feels like putting on heavy gloves before tying your shoelaces.</p>
<p>R’s expressive, powerful data manipulation interface grants it this power. It also makes R hard to learn. You can often find five or six obvious, correct ways to do even a simple task, like obtaining the fourth element of the <code>mtcars</code> columns <code>cyl</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cyl</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 6</code></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 6</code></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 6</code></pre>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 6</code></pre>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colnames.html">rownames</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 6</code></pre>
</div>
</div>
<p>A successor to R might develop a smaller set of operators, and smooth out some oddities (like <code>drop = FALSE</code>). But it should not go too far in this Emphasizing readability and separating tasks into different functions, as <code>dplyr</code> has done, would make code more readable and easier to debug, but also more verbose. Too radical a departure from R’s approach would fail to replicate what makes it special.</p>
<ol start="3" type="1">
<li><em>Metaprogramming</em></li>
</ol>
<p>The other two areas I identify are widely cited as strengths of R. This one, though, is esoteric. While almost all R users take advantage of the features that power metaprogramming, many without knowing it, few use them extensively. It’s easy (and sometimes advisable) even for experienced users to avoid invoking it directly. Still, it distinguishes R from most other languages, and rests on bold design decisions made long before the language’s inception.</p>
<p>“Metaprogramming”, as used in the R community, means writing programs that treat R code as data - programming on programs, in other words. It utilizes R’s highly developed capabilities for partial expression substitution, controlled evaluation, and environment manipulation. Books could be written about this topic, and <a href="https://adv-r.hadley.nz/meta-big-picture.html">Advanced R</a> covers it in detail.</p>
<p>As a basic example, have you ever wondered why most calls to <code>library</code> in R scripts look like <code><a href="https://rdrr.io/r/base/library.html">library(package)</a></code>, not <code><a href="https://rdrr.io/r/base/library.html">library("package")</a></code>? The latter is legal, but seldom used. Most functions will throw an error if passed the name of a nonexistent object:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">d</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>-- Error in eval(expr, envir, enclos): object 'd' not found</code></pre>
</div>
</div>
<p>But certain functions capture their inputs directly, <em>without</em> evaluating them, and then evaluate them in a different context. This is called “quoting”, since it captures the syntax of code while ignoring the semantics the way quoting natural language does. The implementation, known as non-standard evaluation, powers much of R’s interface. One prominent example is formulas: a compact mini-language for specifying a statistical relationship to modeling functions. Because the formula is quoted and evaluated in the context of a data frame, the user can provide bare variable names, making for a clean, simple interface:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/lm.html">lm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mpg</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cyl</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">disp</span>, data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- 
-- Call:
-- lm(formula = mpg ~ wt + cyl * disp, data = mtcars)
-- 
-- Coefficients:
-- (Intercept)           wt          cyl  
--    49.55195     -2.73695     -3.00543  
--        disp     cyl:disp  
--    -0.08670      0.01107</code></pre>
</div>
</div>
<p>The <code>tidyverse</code> takes this idea much further. Its functions rely on <a href="https://dplyr.tidyverse.org/articles/programming.html">tidy evaluation</a>, an elaborate framework for selecting and modifying variables within “data masks.” In the end, R is really a statistics-oriented descendant of Lisp with more conventional syntax. Many of these ideas - expressions as data, expression substitution, and even optional prefix syntax - come from that immortal language.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">`+`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 4</code></pre>
</div>
</div>
<p>All this power comes with serious drawbacks - serious enough that it can be reasonably argued that non-standard evaluation is a bad paradigm. Manipulating expressions means code loses referential transparency (evaluating the same if variable names are changed). Controlled evaluation requires programmers to think about environment inheritance, creating the potential for a host of subtle bugs. Functions that quote some of their arguments but not all, or accept quoted and nonquoted forms of the same argument (like <code>library</code>), are harder to use. In the end, all this indirection makes code harder to write and reason about (hence the need for a vignette on simply programming with <code>dplyr</code>). I think the tradeoff is worthwhile; the convenience and flexibility of non-standard evaluation are too valuable to abandon. But unlike the other two characteristics I outlined above, a strong case can be made otherwise.</p>
<p>In short, a successor to R should contain R’s most powerful features: vector types and vectorized functions, a terse but expressive subsetting syntax, and support for expression manipulation and controlled evaluation.</p>
<section id="improving-on-rs-weaknesses" class="level1"><h1>Improving on R’s Weaknesses</h1>
<p>R is not without faults. The problems listed below are more annoying than serious, but they stem from design decisions made long ago that can no longer be easily reversed. A successor language should avoid those mistakes.</p>
<section id="finicky-interface" class="level2"><h2 class="anchored" data-anchor-id="finicky-interface">Finicky Interface</h2>
<p>R’s user interface, in places, in harder to learn and use than necessary. It uses conventions inconsistently, exposes too much detail to the user, and contains too many “gotchas” that cause confusing errors you can only avoid with experience.</p>
<p>One of the unwritten rules of programming is that inconsistency should not exist without reason. If you write a class <code>Foo</code> with methods called <code>bar_bar</code>, <code>baz_baz</code>, and <code>quxQux</code>, your users will wonder why you used camelCase for just one method every time they try to call the logically expected but nonexistent <code>qux_qux</code>. If you put a data frame argument at the head of one function’s argument list but the tail of another’s, they will wonder why every time they forget which is which. Only constant attention in design can avoid inconsistencies like these, but the best designs do so.</p>
<p>R violates the principle in many places. One trivial but well-known example is the way S3 methods are written <code>generic.class</code> (e.g., <code>mean.default</code>), yet dots are used all the time in the names of functions, including S3 generics. The many exceptions (<code>t.test</code>, <code>all.vars</code>, …) thwart a potentially useful convention. Unlike the other functionals, <code>mapply</code> has the function as the first argument, not the second, and the <code>simplify</code> and <code>use.names</code> arguments are<br>
actually <code>SIMPLIFY</code> and <code>USE.NAMES</code> (not without reason, but good luck remembering). <code>ave</code> and <code>tapply</code> do similar things, but <code>ave</code> uses <code>...</code> for grouping factors, while <code>tapply</code> reserves it for arguments to the <code>FUN</code> argument. Once you notice one of these seams in the design, you can’t unsee it.</p>
<p>R sometimes contains unnecessary complexity. Interfaces often have complicated semantics, and functions sometimes feature multiple operating modes. For instance, there are two slightly different functions for doing principal components analysis, differing in the algorithm used. The function <code>diag</code> has four distinct uses (five, if you count <code>diag&lt;-</code> as part of the same interface). Most troubling to me are the heavily overloaded arguments of certain functions. Consider this passage from the help for <code>get</code>:</p>
<pre><code>The ‘pos’ argument can specify the environment in which to look
     for the object in any of several ways: as a positive integer (the
     position in the ‘search’ list); as the character string name of an
     element in the search list; or as an ‘environment’ (including
     using ‘sys.frame’ to access the currently active function calls).
     The default of ‘-1’ indicates the current environment of the call
     to ‘get’. The ‘envir’ argument is an alternative way to specify an
     environment.</code></pre>
<p>I count three possible types for <code>pos</code>, all with different meanings, a default value with a special meaning, and another argument that does exactly the same thing for one type. (Plus a suggestion to use call stack introspection, which I’ll leave to braver programmers than me).</p>
<p>Trying to memorize the intricacies of an interface like this is a fool’s errand: at some point, you’ll get it wrong and cause a nasty bug. That leaves no recourse but referring to the documentation each time you use the function, and nothing makes an interface more annoying to use.</p>
<p>Another offender is factors. Factors represent categorical variables by mapping integer codes to levels. Simple idea, but so many potential errors come from this fact. Something as simple as naively concatenating a factor causes disaster:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/factor.html">factor</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/factor.html">factor</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] "1" "2" "3" "d"</code></pre>
</div>
</div>
<p>Attempting to do factor arithmetic only triggers a warning, despite being nonsense (Note also that the factor warning preempts the “mismatched object lengths” warning this would normally trigger):</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] NA NA NA NA</code></pre>
</div>
</div>
<p>Worst of all, and not widely known: R’s lexical sort order differs by system locale. (See <a href="https://stackoverflow.com/questions/31772185/language-dependent-sorting-with-r">here</a> for an example). When creating a factor, R defaults to ordering the levels lexically. Good luck with that reproducible research!</p>
<p>Individually, these criticisms are trivial. I don’t mean to cast them as evidence of incompetence or carelessness by the language designers. I have written much worse interfaces to far simpler programs, so I know from experience how hard it is to implement and maintain a good one. But our successor language can do better by following the <code>tidyverse</code> and making “design for human users” a core principle.</p>
</section><section id="very-weak-typing" class="level2"><h2 class="anchored" data-anchor-id="very-weak-typing">Very Weak Typing</h2>
<p>Our new language should have dynamic typing. Static typing makes code easier to reason about and debug, especially in large applications, but it would be awkward to explore or transform data without quick, easy type conversions that can be done interactively. In its present form, I think R makes these conversions a little <em>too</em> easy. R is a weakly typed language: instead of disallowing operations with objects of disparate types, it casts them to a common type. Sometimes the result is predictable:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] "TRUE" "abc"</code></pre>
</div>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 4</code></pre>
</div>
</div>
<p>But sometimes R will allow operations that have no sensible result:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/paste.html">paste0</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"abc"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>--  [1] "c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4, 30.4, 33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8, 19.7, 15, 21.4)abc"                    
--  [2] "c(6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4)abc"                                                                                                            
--  [3] "c(160, 160, 108, 258, 360, 225, 360, 146.7, 140.8, 167.6, 167.6, 275.8, 275.8, 275.8, 472, 460, 440, 78.7, 75.7, 71.1, 120.1, 318, 304, 350, 400, 79, 120.3, 95.1, 351, 145, 301, 121)abc"                       
--  [4] "c(110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150, 150, 245, 175, 66, 91, 113, 264, 175, 335, 109)abc"                                                     
--  [5] "c(3.9, 3.9, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92, 3.07, 3.07, 3.07, 2.93, 3, 3.23, 4.08, 4.93, 4.22, 3.7, 2.76, 3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11)abc"                  
--  [6] "c(2.62, 2.875, 2.32, 3.215, 3.44, 3.46, 3.57, 3.19, 3.15, 3.44, 3.44, 4.07, 3.73, 3.78, 5.25, 5.424, 5.345, 2.2, 1.615, 1.835, 2.465, 3.52, 3.435, 3.84, 3.845, 1.935, 2.14, 1.513, 3.17, 2.77, 3.57, 2.78)abc"  
--  [7] "c(16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20, 22.9, 18.3, 18.9, 17.4, 17.6, 18, 17.98, 17.82, 17.42, 19.47, 18.52, 19.9, 20.01, 16.87, 17.3, 15.41, 17.05, 18.9, 16.7, 16.9, 14.5, 15.5, 14.6, 18.6)abc"
--  [8] "c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1)abc"                                                                                                            
--  [9] "c(1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1)abc"                                                                                                            
-- [10] "c(4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 4)abc"                                                                                                            
-- [11] "c(4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1, 2, 2, 4, 6, 8, 2)abc"</code></pre>
</div>
</div>
<p>Moreover, R has no equivalent of Python’s type hinting system. If you want to enforce a specific type for function arguments, you have to do it manually:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/character.html">is.character</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/stop.html">stop</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x must be character"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></code></pre></div>
</div>
<p>Many of the type-checking helpers like <code>is.character</code> have surprisingly complex behaviors that make them dangerous to rely on.</p>
<p>R functions also do not always have stable return types. <code>sapply</code>, for example, can return a list, an array, an atomic vector, or even an empty list, depending on the input. Programming guides often recommend <code>lapply</code> or <code>vapply</code> instead, since they enforce stable return types, but many unwary users (including me, at various times) who did not know this have written subtly buggy code.</p>
<p>R’s very weak typing accounts for much of the unpredictable behavior that makes it challenging to use in large applications. I think strict typing like Python’s would be excessive; operations like <code>paste(1:10, letters[1:10])</code> are too convenient to part with. But our successor language will dispense with some of the crazier implicit coercions R allows.</p>
</section><section id="string-manipulation" class="level2"><h2 class="anchored" data-anchor-id="string-manipulation">String Manipulation</h2>
<p>R’s string manipulation facilities leave something to be desired. In other languages, strings are array types or feature array-like subsetting. R, however, handles strings (i.e., the raw character data that make up the elements of character vectors) with an <a href="https://cran.r-project.org/doc/manuals/r-release/R-ints.html#SEXPTYPEs">internal type</a>. You can’t extract string elements the way you can in Python:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python source code-with-copy"><code class="sourceCode python"><span id="cb31-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A typical string"</span></span>
<span id="cb31-2">x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- 'A'</code></pre>
</div>
</div>
<p>You have to use <code>substr</code> or <code>substring</code> (barely distinguishable functions again!)</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A typical string"</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/substr.html">substr</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] "A"</code></pre>
</div>
</div>
<p>The rationale is obvious - the unpalatable alternative would be to implement character vectors as list-like recursive vectors - but it has annoying consequences for the interface, such as <code>strsplit</code> returning a list:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb35" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is a typical"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"character vector"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/strsplit.html">strsplit</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, split <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\\s"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [[1]]
-- [1] "This"    "is"      "a"       "typical"
-- 
-- [[2]]
-- [1] "character" "vector"</code></pre>
</div>
</div>
<p>But these are quibbles. The real problem is the regular expression interface. This is the only part of base R I actively dislike. There are too many functions with terse, barely distinguishable names. (If you can remember the difference between <code>gregexpr</code> and <code>regexec</code> without looking it up, please teach me your secrets). Functions don’t use <a href="https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions">PCRE</a> by default, a fact I never remember until it causes an error. They return match data in awkward formats; <code>gregexpr</code>, for instance, returns a list of match start positions and lengths, making it difficult to extract the actual match data.</p>
<p>Put together, these issues make working with regular expressions much more verbose and painful than necessary. The convoluted snippet below, copied from the documentation, does nothing more than create a matrix with the text from two capture groups. For comparison, Python’s <code>re</code> module contains a <code>groupdict</code> method that stores matches in an appropriate data structure automatically.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb37" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">notables</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"  Ben Franklin and Jefferson Davis"</span>,
  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"\tMillard Fillmore"</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># name groups 'first' and 'last'</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">name.rex</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"(?&lt;first&gt;[[:upper:]][[:lower:]]+) (?&lt;last&gt;[[:upper:]][[:lower:]]+)"</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">parsed</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/grep.html">regexpr</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">name.rex</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">notables</span>, perl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 3 2
-- attr(,"match.length")
-- [1] 12 16
-- attr(,"index.type")
-- [1] "chars"
-- attr(,"useBytes")
-- [1] TRUE
-- attr(,"capture.start")
--      first last
-- [1,]     3    7
-- [2,]     2   10
-- attr(,"capture.length")
--      first last
-- [1,]     3    8
-- [2,]     7    8
-- attr(,"capture.names")
-- [1] "first" "last"</code></pre>
</div>
<div class="sourceCode" id="cb39" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/grep.html">gregexpr</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">name.rex</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">notables</span>, perl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 2
-- attr(,"match.length")
-- [1] 16
-- attr(,"index.type")
-- [1] "chars"
-- attr(,"useBytes")
-- [1] TRUE
-- attr(,"capture.start")
--      first last
-- [1,]     2   10
-- attr(,"capture.length")
--      first last
-- [1,]     7    8
-- attr(,"capture.names")
-- [1] "first" "last"</code></pre>
</div>
<div class="sourceCode" id="cb41" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">parse.one</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">res</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/do.call.html">do.call</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">rbind</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/lapply.html">lapply</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/seq.html">seq_along</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">res</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">i</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">i</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/function.html">return</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">st</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/attr.html">attr</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capture.start"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">i</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>
    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/substr.html">substring</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">res</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">i</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">st</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">st</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/attr.html">attr</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capture.length"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">i</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colnames.html">colnames</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/attr.html">attr</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">result</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"capture.names"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">m</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse.one</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">notables</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">parsed</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>--      first     last      
-- [1,] "Ben"     "Franklin"
-- [2,] "Millard" "Fillmore"</code></pre>
</div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python source code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re </span>
<span id="cb43-2"></span>
<span id="cb43-3">notables <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Ben Franklin and Jefferson Davis"</span>,  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Millard Fillmore"</span>]</span>
<span id="cb43-4">[re.match(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".*(?P&lt;first&gt;[A-Z][a-z]+).*(?P&lt;last&gt;[A-Z][a-z]+)"</span>, x).groupdict() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> notables]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [{'first': 'Jefferson', 'last': 'Davis'}, {'first': 'Millard', 'last': 'Fillmore'}]</code></pre>
</div>
</div>
<p>(Is Fillmore’s inclusion a sly joke? He is chiefly notable for being a bottom-tier president).</p>
<p>The excellent <code>stringr</code> package provides functions that fix all of these problems. But R users shouldn’t have to choose between taking a major dependency and foregoing easy string processing.</p>
</section></section><section id="summing-up" class="level1"><h1>Summing Up</h1>
<p>You should have a clear idea by now of the language I want. It relies on vector types and makes it easy to manipulate data. It uses some form of non-standard evaluation and offers powerful metaprogramming tools to interested users. Its interface judiciously hides complexity and contains few discrepancies and special cases. With an easy-to-use package system and thorough documentation, it will rapidly gain users and establish a productive, long-lasting community.</p>
<p>That language sounds a lot like what the people behind <code>tidyverse</code> have already created. <code>tidyverse</code> expands and enhances R’s data manipulation capabilities, with particular attention to ease of use and rigorous implementation of non-standard evaluation. Perhaps most importantly, its developers update aggressively; they have made several complete overhauls of <code>dplyr</code>’s interface over the past few years. This means lots of breaking changes that make <code>tidyverse</code> infamously dangerous to use in production, but <code>tidyverse</code> advances and develops new ideas much more quickly than R itself. I think the tradeoff is worthwhile.</p>
<p>It also sounds a little like <a href="https://julialang.org/">Julia</a>, a newer statistical language with metaprogramming support, vector types, and an emphasis on performance that is lacking in R.That emphasis, <a href="https://www.reddit.com/r/datascience/comments/m8wcnl/julia_vs_rpython/">some have observed</a>, gives it the potential to eliminate the “prototype in R/Python, program in C/C++” cycle that plagues machine learning research today. It has nowhere near R’s popularity or anything like its mature ecosystem, but users I’ve encountered speak highly of it. Will I be writing Julia ten years from now? Perhaps. But for now, R reigns supreme.</p>
<p># TODO: Update this in 4 years to see how things shook out</p>


<!-- -->

</section> ]]></description>
  <category>R</category>
  <guid>https://ryan-heslin.github.io/posts/next_language/index.html</guid>
  <pubDate>Thu, 08 Sep 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Chasing A*: Completing Advent of Code 2021, Once and For All</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/a_star/index.html</link>
  <description><![CDATA[ 




<p><em>This post contains spoilers for the day 23 puzzle of Advent of Code 2021.</em></p>
<p>In an earlier post, I related my long but successful effort to obtain every last star in <a href="https://adventofcode.com/">Advent of Code</a>’s 2021 edition. It ended in surprising anticlimax when I solved <a href="https://adventofcode.com/2021/day/23">day 23</a>, a puzzle that looked daunting to tackle with code, using paper, pen, and some cut-up sticky notes. I could have stopped there. I should have stopped there. But good stories don’t end with an anticlimax, and the feeling that I had somehow cheated nagged at me. With plenty of free time as I hunted for a job, I decided to solve the puzzle the right way.</p>
<section id="the-problem" class="level1">
<h1>The Problem</h1>
<p>Day 23’s puzzle is a variant of the classic <a href="https://en.wikipedia.org/wiki/Tower_of_Hanoi">Towers of Hanoi</a>. Instead of disks, the puzzle has players move different types of <a href="https://en.wikipedia.org/wiki/Amphipoda">amphipod</a>, in keeping with the year’s ocean theme. More importantly, the goal is to move each amphipod of each type into the correct “side room” connected to the main board, or “hall”, as efficiently as possible. The second part of the puzzle doubles the number of amphipods, making it much tougher to solve by hand.</p>
<p>A post on the <a href="https://www.reddit.com/r/adventofcode/comments/wl873a/aoc_and_professional_developers/">subreddit</a> suggested using the A* (“A star”) algorithm. <a href="">A*</a>https://en.wikipedia.org/wiki/A*_search_algorithm) is a classic pathfinding algorithm that finds the shortest path between two given nodes of a <a href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph</a>. Implementations use a function called <code>d</code> to measure distances between nodes, and a heuristic function called <code>h</code> to estimate the distance between a node and the goal. The algorithm is mathematically certain to return the correct path if <code>h</code> never overestimates the distance to the goal.</p>
<p>In the problem at hand, the nodes were clearly game states (legal configurations of the board). Two nodes shared a connection if one could be reached from the other by a legal move (luckily, no legal moves are reversible, so the graph is acyclic — no loops are possible). The puzzle required the only the minimal cost of completing the game, not the actual sequence of moves, which further simplified things.</p>
<p>Still, I faced several hard tasks:</p>
<ol type="1">
<li>Create a data structure capable of representing any valid game state</li>
<li>Implement <code>d</code> (to measure distances between nodes) and <code>h</code> (to conservatively estimate any node’s distance from the goal).</li>
<li>Write an <code>A_star</code> function that used these routines to find the minimal cost</li>
</ol>
</section>
<section id="into-the-fray" class="level1">
<h1>Into the Fray</h1>
<p>As is usual with Advent of Code, the first task was parsing the input. This was my raw input:</p>
<pre><code>#############
#...........#
###A#D#A#B###
  #B#C#D#C#
  #########</code></pre>
<p>I made the crucial decision to represent positions on the board as tuples of <code>(x, y)</code> coordinates. Since I was using Python, I decided to use a zero-based index, with the leftmost hall space as the <code>x</code> origin and the bottom side room spaces as the <code>y</code> origin. So the leftmost <code>A</code> amphipod on the board above would be located at <code>(2, 2)</code>. I would have made my life much easier if I had used complex numbers instead of tuples of real numbers. In any case, I wrote a crude function to map each amphipod type to a set containing its positions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> parse(inp, xmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb2-2">    stripped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> : (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(inp) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb2-3">    ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(stripped)</span>
<span id="cb2-4">    stripped.reverse()</span>
<span id="cb2-5">    stripped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>stripped))</span>
<span id="cb2-6">    stripped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stripped[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> : (xmax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb2-7">    mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {i: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)}</span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(ends) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(ends) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb2-9">        this <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stripped[i]</span>
<span id="cb2-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(ymax):</span>
<span id="cb2-11">            val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> values_map[this[j]]</span>
<span id="cb2-12">            mapping[val].add((i, j))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add position to set</span></span>
<span id="cb2-13"></span>
<span id="cb2-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mapping, ymax</span></code></pre></div>
</div>
<p>Then I wrote a complicated function I’ll spare you. It computed, for each pair of coordinates it was legal to move between, the spaces spanning them. That way, I could allow moves only after confirming that that space wasn’t blocked.</p>
<p>Next came designing an object to represent game states. It should own <code>h</code> and <code>d</code>, the second of which would take another game state as argument. I decided it should also be responsible for finding adjacent nodes and creating objects to represent them. I decided to call the class <code>State</code>.</p>
<p>From here, my work only got kludgier. <code>State</code> ended up mapping each amphipod type to a set of the positions it occupied as well as tracking the occupants of each side room - a redundancy I couldn’t seem to avoid. From there, <code>d</code> and <code>h</code> were surprisingly simple. <code>d</code> would only ever be called on states that differed by the position of just one amphipod, so all I had to do was find the two coordinate tuples that disagreed in the instances’ coordinate sets, measure the distance between them, and multiply by the cost of moving the relevant amphipod type one space. <code>h</code> was a bit trickier, but hardly brutal — I just computed the distance from each amphipod to the target side room, a simple approach that would never underestimate the true cost.</p>
<p>The real bear turned out to be finding the valid neighbors of each instance. It took me an embarrassingly long time to figure out the rules:</p>
<ol type="1">
<li><p>Amphipods in side rooms may only move out if they are in the side room of the wrong type, or if an amphipod of the wrong type is positioned behind them.</p></li>
<li><p>Amphipods in side rooms that meet one or both criteria can move to any hall space to which the path is clear, or the innermost open space of their side room if it complies with rule 4.</p></li>
<li><p>Amphipods in hall rooms may only move into the side room of their type, and only if a path to it is clear.</p></li>
<li><p>A side room may only admit amphipods if it either contains no amphipods or only amphipods of its type.</p></li>
</ol>
<p>Translating these directives into conditions was pure hell, and the result turned into pure write-only code. Here’s a representative excerpt:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> coord[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sides_idx:</span>
<span id="cb3-2">    x_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.side_idx2type(coord[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (x_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sides[k][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"completed"</span>]) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> (</span>
<span id="cb3-4">            coord[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ymax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-5">            <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sides[x_type][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"room"</span>][coord[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb3-6">            ):</span>
<span id="cb3-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span></span></code></pre></div>
</div>
<p>Somehow, I finished it.</p>
<p>That left only the <code>A_star</code> function that did the real work. Translating Wikipedia’s pseudocode for the algorithm into Python was simple:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> A_star(start, goal, debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb4-2">    start_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hash</span>(start)</span>
<span id="cb4-3">    open_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {start_k: start}</span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For node k, node preceding it on cheapest known path to k</span></span>
<span id="cb4-6">    came_from <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb4-7"></span>
<span id="cb4-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># g_score[k] is cost of cheapest known path to k</span></span>
<span id="cb4-9">    g_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: inf)</span>
<span id="cb4-10">    g_score[start_k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># gscore[k] + k.h() - best estimate of total cost (default to infinity if node unknown)</span></span>
<span id="cb4-12">    f_score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span>: inf)</span>
<span id="cb4-13">    f_score[start_k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g_score[start_k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> start.h()</span>
<span id="cb4-14"></span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> open_set:</span>
<span id="cb4-16">        min_cost <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inf</span>
<span id="cb4-17">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># h = hash</span></span>
<span id="cb4-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> h, node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> open_set.items():</span>
<span id="cb4-19">            score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f_score[h]</span>
<span id="cb4-20">            this_cost <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(min_cost, score)</span>
<span id="cb4-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> this_cost <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> min_cost <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> h <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> open_set.keys():</span>
<span id="cb4-22">                current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node</span>
<span id="cb4-23">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(current)</span></span>
<span id="cb4-24">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print("\n")</span></span>
<span id="cb4-25">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> current <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> goal:</span>
<span id="cb4-26">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> g_score[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hash</span>(current)]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cheapest cost to goal</span></span>
<span id="cb4-27">                min_cost <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> this_cost</span>
<span id="cb4-28">        current_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hash</span>(current)</span>
<span id="cb4-29">        current.find_neighbors()</span>
<span id="cb4-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> debug:</span>
<span id="cb4-31">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hash</span>(current))</span>
<span id="cb4-32">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(current)</span>
<span id="cb4-33">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-------------------</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> current.neighbors:</span>
<span id="cb4-35">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(n)</span>
<span id="cb4-36">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(current.d(n))</span>
<span id="cb4-37">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Continue: "</span>)</span>
<span id="cb4-38">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-39">        open_set.pop(current_k)</span>
<span id="cb4-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> current.neighbors:</span>
<span id="cb4-41">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(neighbor.neighbors)</span></span>
<span id="cb4-42"></span>
<span id="cb4-43">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Distance from start to neighbor through current</span></span>
<span id="cb4-44">            g_score_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g_score[current_k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> current.d(neighbor)</span>
<span id="cb4-45">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(f"distance: {current.d(neighbor)}")</span></span>
<span id="cb4-46">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(neighbor)</span></span>
<span id="cb4-47">            neighbor_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hash</span>(neighbor)</span>
<span id="cb4-48">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This path to neighbor cheaper than any known, so record it</span></span>
<span id="cb4-49">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> g_score_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> g_score[neighbor_k]:</span>
<span id="cb4-50">                came_from[neighbor_k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> current</span>
<span id="cb4-51">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New estimate of cost from this neighbor</span></span>
<span id="cb4-52">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forgot this line</span></span>
<span id="cb4-53">                g_score[neighbor_k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g_score_new</span>
<span id="cb4-54">                f_score[neighbor_k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> g_score_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> neighbor.h()</span>
<span id="cb4-55">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> neighbor <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> open_set.values():</span>
<span id="cb4-56">                    open_set[neighbor_k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> neighbo</span></code></pre></div>
</div>
<p>My only addition, naturally, was a debug mode. Then came the really hard part.</p>
<p>I spent an embarrassing amount of time in the debugger getting everything to work correctly. I fell into in a dispiriting loop of scanning output for evidence of bugs, stepping through the debugger to track them down, and making painstaking changes to fix them. I came close to giving up, and several times regretted starting. Then, one fine July Monday morning, I saw the code spit out a plausible-looking answer. Not expecting success, I checked the Advent of Code website and gasped when I saw it was correct.</p>
<p>I wasn’t home free; my inefficient kludge algorithm might well be too slow for the second half of the problem. I modified <code>State</code> to handle a larger game board, crossed my fingers, and ran the script again. It took a few minutes longer, but it spit out the correct answer for part 2. I had done it.</p>
<p>I savored the feeling of blissful triumph, knowing it would not last. I might have just finished the worst implementation of <code>A*</code> of all time, but it was <em>my</em> implementation, and it solved the problem. Somehow, writing your own intricate kludge is far more satisfying then copying someone else’s elegant solution. In any case, I was at last done: I had finished all 25 puzzles for Advent of Code 2021 by myself. Perhaps an achievement in pointlessness, but an achievement nonetheless.</p>


<!-- -->

</section>

 ]]></description>
  <category>Advent of Code</category>
  <category>Python</category>
  <guid>https://ryan-heslin.github.io/posts/a_star/index.html</guid>
  <pubDate>Sun, 14 Aug 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Don’t Neglect Unit Testing</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/testthat/index.html</link>
  <description><![CDATA[ <p>Bad habits are hard to break. When I finish a first version of a function, I sometimes just make up an input, call it interactively, and move on if it seems to work, promising myself I’ll get around to properly testing it later. If someone asks me about it, I can only reply honestly: “I haven’t tested it thoroughly, but I’m pretty sure it works.” I do use and appreciate unit testing: when I wrote my first package, I tested it thoroughly, probably too thoroughly. Still, I often yield to the temptation of informal testing, and just as often regret it.</p>
<p>I relearned this lesson recently while writing tests for the image classifier I’ve been working on for several months. It uses the <code>torch</code> package, which contains R bindings for the <code>torch</code> machine learning library. The classifier uses a customized subclass of a class called <code>torch_dataset</code> to implement a pretrained neural network. <code>torch_dataset</code> instances organize data for model training and evaluation. The subclass, called <code>candidate_image_dataset</code>, does this with file paths to images and class labels. Sampling an instance directly creates a tensor containing that image’s data; it also exposes an attributed called <code>metadata</code>, a data frame with each image’s file path and class label. The subclass can also be configured to return a randomly selected image when indexed. But if sampling is disabled, indexing the <img src="https://latex.codecogs.com/png.latex?i">th image directly should yield the image found in row <img src="https://latex.codecogs.com/png.latex?i"> of <code>metadata</code>.</p>
<p>Almost as an afterthought, I added a test of the subclass’ <code>.getitem</code> method to confirm all this worked as described All it did was check that, for an instance <img src="https://latex.codecogs.com/png.latex?x"> that did not use sampling, <code>x$getitem(1)</code> returned the image whose file path was stored in <code>x$metadata[1,]</code>.</p>
<p>I tend to be pessimistic, but I was still caught off guard when this trivial check failed. Unnerved, I looked through my code for the origin of the bug. The logical flag controlling whether an instance sampled indices did check whether the user had specified sampling weights, as expected:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">n_weights</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.sample_weights</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compute_sample_weights</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">images</span>,
    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sample_weights</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.uses_sample</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></code></pre></div>
</div>
<p>That left only one possible culprit: a wrongly set default value. Sure enough, in the list of private attributes:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.uses_sample</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span></code></pre></div>
</div>
<p>So the class was sampling whether the user indicated it or not. I changed that <code>TRUE</code> to <code>FALSE</code> and the test passed. Had I not taken a few minutes to construct this seemingly unnecessary unit test, I would not have noticed the bug. I would only have caught it at a less convenient time, possibly after it compromised results obtained from the classifier. Verifying the assumptions you make about your code, even obvious ones, is never wasted time.</p>
<p>Unit testing, at least for me, has another advantage: it’s tremendously motivating. When the console fills up with a traceback and a cryptic error message, I know I made a mistake somewhere. That makes me responsible for correcting it. I become very dogged when I have a clear goal in mind, so I seldom fail to track down and fix the bug. Pinning down the cause holds some interest, too, since it’s typically a surprise: anything from a misnamed variable to a subtle misunderstanding that compromises the whole algorithm.</p>
<p>Then, having hopefully learned my lesson, it’s on to the next test case.</p>


<!-- -->


 ]]></description>
  <category>R</category>
  <guid>https://ryan-heslin.github.io/posts/testthat/index.html</guid>
  <pubDate>Tue, 19 Jul 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>That Kind of a Day</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/that_kind_of_a_day/index.html</link>
  <description><![CDATA[ 




<p>The <code>lintr</code> package, a widely used <a href="https://en.wikipedia.org/wiki/Lint_(software)">linter</a> for R code, prefers that you use snake case for object names. “You” includes R core:</p>
<p><img src="https://ryan-heslin.github.io/img/dotcase.png" class="img-fluid" alt="Too bad the base namespace is locked"></p>
<p>In fairness, <code>is.numeric</code> <em>ought</em> to be called <code>is_numeric</code>, because dots are supposed to be reserved for S3 methods. R breaks this rule all the time, leading to names like <code>as.data.frame.data.frame</code>. R updates are named after <em>Peanuts</em> strips; getting dinged by the linter for using a base function is something that would happen to Charlie Brown if he ever took up programming. Apparently, whatever method <code>lintr</code> uses to exempt base function names from linting doesn’t work when those function names are arguments to another function.</p>
<p>As you might guess from the traceback thirty calls deep on the right of the screen, this wasn’t a great day. But I can’t help but smile when I see a linter commit heresy.</p>


<!-- -->


 ]]></description>
  <category>R</category>
  <guid>https://ryan-heslin.github.io/posts/that_kind_of_a_day/index.html</guid>
  <pubDate>Tue, 05 Jul 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Triumph and Travesty: Earning All 50 Stars in Advent of Code 2021</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/triumph-travesty/index.html</link>
  <description><![CDATA[ 




<p><em>This post contains spoilers for some 2021 Advent of Code puzzles. Proceed at your own risk</em>.</p>
<p>If you haven’t heard of <a href="https://adventofcode.com/">Advent of Code</a>, it’s well worth your time to check out. Created and maintained by software engineer Eric Wastl, Advent of Code (AoC for short) is an annual event involving an advent calendar of Christmas-themed programming challenges. Anyone can participate for free, anonymously if they like. A new puzzle is released on each of the first 25 days of December. They start simple and gradually increase in difficulty. Elite players compete for spots on the official leaderboard of the fastest solutions, but most (myself included) just aim to solve the puzzles. Each puzzle(with one exception) awards two “gold stars” when completed, providing a way to track your progress.</p>
<p>The puzzles themselves take the form of well-posed problems, connected through a whimsical yuletide narrative. This year’s edition sent players to the ocean depths in a submarine to retrieve the lost keys to Santa’s sleigh. Along the way, they encountered treacherous currents, labyrinthine caves, and a whole lot of obstreperous sea creatures - all of which could only be overcome with some creative programming (Half the fun is recognizing the classical computer science problems underneath the intentonally silly presentation). Each puzzle consists of two parts. The first part states the problem, with any necessary rules, and offers a plaintext input (randomly generated for each player) to work from. If the player submits the correct answer, they receive a gold star…and updated instructions with a new version of the problem to solve. It usually adds a new constraint or asks the player to interpret the input in a different way; depending on the problem and the player’s approach for part 1, overcoming it could take anything from changing a single line to starting from scratch. Submitting the correct answer for the second part earns another gold star and completes that day’s puzzle. (The lone exception to the standard format is the Christmas Day puzzle, which differs in a way I won’t spoil). Players can use whatever language and strategy they like; some solve puzzles in absurd (or do I mean awesome) languages like <a href="https://codewithrockstar.com/">Rockstar</a>, or impose tough constraints, because they can.</p>
<p>The puzzles test a wide variety of programming techniques, from recursion to graph traversal to regular expressions. The problem statements are all “fair” - there are no hidden rules or lawyerly gotchas - but even a subtle misunderstanding can cost you hours of frustrating debugging (just like real life!). With no constraints and no expectation to write production-quality code, you’re free to tackle each problem as you see fit, limited only by your knowledge and creativity.</p>
<p>I stumbled across AoC in late 2020, a pivotal time in my life. Perhaps a month before, realizing I liked programming a lot more than policy analysis, I had decided to convert my masters degree from public policy to data science. With enough experience in R to feel (over)confident in my programming skills, I dove in without hesitation and spent much of that holiday break absorbed in the puzzles. Tackling such beautifully abstract problems, with no pressure and no shame in failing, was bliss; I enjoyed even the frustration. Realizing R was ill-suited for many of the puzzles, I switched to Python, learning it as I went. I only ever solved some of the puzzles, and those in amateurish fashion (look <a href="https://github.com/ryan-heslin/aoc2020">here</a> if you’re morbidly curious), but I became a much better programmer for it. Having had so much fun, I resolved to come back next year truly prepared.</p>
<p>When December 2021 came, I threw myself into the puzzles. (I probably should have spent more time studying for exams instead, but this questionable time allocation thankfully didn’t hurt my GPA). The first few days came easily, aside from day 3, for which I kludged together an overcomplicated solution involving bitshifting. I switched between R and Python, preferring R for problems involving matrices and similar structures and Python where iteration was emphasized. Once again, I learned plenty along the way: queues for day 6, optimization for day 7, complex numbers as coordinates for day 11. For longer than I expected, I managed not to fall a day behind.</p>
<p>But that couldn’t last. I got badly stuck on part 2 of day 14 (which was not a hard problem, in hindsight). The end came on day 15, a tough problem involving graph traversal. I stalled out after hours of work, until a post on the subreddit pointed me toward <a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">Dijkstra’s algorithm</a>. After writing probably the worst implementation of all time and letting my computer chug along for about an hour, I claimed both gold stars. But I had almost burnt myself out. The remaining puzzles (aside from a few easier “breather” problems) seemed impossible, and I ceased trying to keep up. Determined to keep going, I gutted my way through day 16, completing it only after spending hours looking in the wrong places for a simple bug. I knew then I had to stop.</p>
<p>I had done better than I had expected; 50 stars seemed within reach. After taking a few days off, I knocked out a few of the easier puzzles, leaving thirty-odd stars secured. But then the spring semester started, depriving me of free time. Somehow, I still managed to complete the very challenging day 24, guided by a kind user on the Python discord. After that, as the holidays became a distant memory, Advent of Code fell to the bottom of my priorities.</p>
<p>That is, until I graduated. Without a job, and itching to work on something that didn’t involve complex data manipulation, I picked up where I had left off. The first puzzles fell with surprising ease: day 18, after some crude but effective string processing; day 19, after browsing the <a href="https://www.reddit.com/r/adventofcode/">subreddit</a> for tips; and even part 2 of day 21, completed after I spent half an hour fiddling with code I hadn’t touched for five months (when does that ever happen?). Day 22 stumped me for a while, so I asked for advice on the subreddit and followed a set-theory approach that ended up yielding a very elegant solution. That left just day 23: finding the optimal strategy for a simple puzzle that would be very, very hard to solve programatically. I dimly remembered some post on the subreddit recommending the <a href="https://en.wikipedia.org/wiki/A*_search_algorithm">A* algorithm</a>. Knowing it was always smart to work out the problem with pen and paper before writing any code, I sketched out a game board, cut up some sticky notes to use as tokens, and set to work. I solved part 1 easily enough this way, so for the hell of it I tried again on part 2, which posed the same problem on an expanded game board. A few failed attempts later, I nearly gave up; I had learned the hard way how easily “just one more try” turns into a few hours of futile coding. But that time, I didn’t. When I entered my answer, I saw for the last time the familiar message:</p>
<pre><code>You have solved part 2 of this puzzle! It provides one gold star.</code></pre>
<p>It came as an anticlimax; I would not have to code that A* nightmare after all. Perversely, I felt cheated. Maybe I <em>had</em> cheated. The official description of Advent of Code entreats you to solve puzzles in “any programming language you like,” after all. Was I violating the spirit of the event by avoiding a programmatic solution entirely? Perhaps. The thought nags at me, so I suspect I’ll come back to this problem eventually, when I’m more confident in graph traversal algorithms. But still, I had all 50 stars, a feat that had seemed impossible just a year before.</p>
<p>Viewed one way, this is a trivial achievement: writing throwaway code to solve toy problems invented to kill time over in the weeks before Christmas. Viewed another way, it’s legitimately impressive. I solved all 25 of these puzzles in the time I could spare, just to sharpen my skills and indulge my love of the art of programming. I think it’s enough to say that grad students my age have found worse diversions. Either way, I emphasize that I had plenty of help: people on the subreddit and other forums to guide me, tutorials to consult, and above all the knowledge that many other people persevered through the same frustrations and got to 50 stars.</p>
<p>I’ll probably be back next year, of course. I’ll have a lot less time to devote, since I expect to have a job by then. I don’t know if I’ll grind out all 50 stars again, now that I’ve done it already. But I do know that any time I spend on Advent of Code won’t be wasted, and I’ll be a better programmer for it.</p>
<p>I just hope there aren’t as many graphs this time.</p>
<p>My repository for Advent of Code 2021: <a href="https://github.com/ryan-heslin/AoC2021">https://github.com/ryan-heslin/AoC2021</a></p>


<!-- -->


 ]]></description>
  <category>R</category>
  <category>Python</category>
  <category>Advent of Code</category>
  <guid>https://ryan-heslin.github.io/posts/triumph-travesty/index.html</guid>
  <pubDate>Mon, 27 Jun 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Programatically Creating Accessor Functions for R6 Objects</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/R6-active/index.html</link>
  <description><![CDATA[ <p>One nice feature of R6 objects is active fields. Normally, to expose a field to the user, you have pass it to the <code>public</code> argument of the <code>R6Class</code> constructor. That makes it accessible, but also permits the user to meddle with it.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/library.html">library</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://r6.r-lib.org">R6</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>

<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">unprotected</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://r6.r-lib.org/reference/R6Class.html">R6Class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
  classname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unprotected"</span>,
  public <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>foo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, baz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">unprotected</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 1</code></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 2</code></pre>
</div>
</div>
<p>Fields can be protected by sending them to <code>private</code> instead, but that blocks the user from accessing them. The solution is to create an <code>active</code> field. This creates an active binding: a special form of R function that can be used to return a value if called with no arguments and to bind a value if called with one. We can use this capability to create an accessor function that blocks users from changing values:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">protected</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://r6.r-lib.org/reference/R6Class.html">R6Class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
  classname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example"</span>,
  public <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
    bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, baz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,
    initialize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
  private <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>.foo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
  active <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>foo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/missing.html">missing</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/function.html">return</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.foo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/stop.html">stop</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hands off!"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>

<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">protected</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>foo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 1</code></pre>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>-- Error in (function (value) : Hands off!</code></pre>
</div>
</div>
<p>(See <a href="https://adv-r.hadley.nz/r6.html">chapter 14 of Advanced R</a> for more details).</p>
<p>This is all simple enough, but there’s an obvious problem: what if we have a lot of attributes to protect? We could dodge the problem by combining them into a single list attribute, or just copy-paste the same function with different attribute names. But those options aren’t always attractive. I recently confronted this problem while working on an elaborate subclass of <code><a href="https://rdrr.io/pkg/torch/man/dataset.html">torch::dataset</a></code>, which organizes data for neural networks. I decided to rifle through my bag of functional programming tricks in search of a solution.</p>
<section id="first-attempt-function-factory" class="level1"><h1>First Attempt: Function Factory</h1>
<p>Since each active field requires a function, a function factory was an obvious approach. It’s simple to implement:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">accessor_factory</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">field</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/force.html">force</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">field</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/missing.html">missing</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/function.html">return</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"field"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/stop.html">stop</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hands off "</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">field</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"!"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></code></pre></div>
</div>
<p>(The real version used a less jocular error message, but I need to have my fun somehow). Because R has lexical scope, <code>field</code> is bound in the manufactured function’s enclosing environment, so when executed it should look there and find it.</p>
<p>But it doesn’t work.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">protected</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://r6.r-lib.org/reference/R6Class.html">R6Class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
  classname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example"</span>,
  public <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
    bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, baz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,
    initialize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
  private <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>.foo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
  active <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>foo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accessor_factory</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".foo"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">protected</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- NULL</code></pre>
</div>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>-- Error in (function (value) : object 'field' not found</code></pre>
</div>
</div>
<p>Either R core sneaked support for dynamic scope into the last major version, or the <code>R6Class</code> constructor was doing something funny. Checking the source code found the offending line:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">generator_funs</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">assign_func_envs</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">generator_funs</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">generator</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
</div>
<p>The constructor modified the environments of function fields (a trick I also resorted to while writing a different subclass, but that’s another story). Relying on scope wouldn’t help, but what would?</p>
</section><section id="second-attempt-as.function" class="level1"><h1>Second Attempt: <code>as.function</code>
</h1>
<p>My next idea was to use R’s obscure but powerful function constructor, <code>as.function</code>. It has a strange implementation: it takes a list, interpreting all elements except the last as name-value pairs for arguments (with an empty value slot designating an argument with no default). The last element should be an expression defining the function body. This is what I wrote:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">accessor_factory</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">field</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/force.html">force</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">field</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/substitute.html">substitute</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
      <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/missing.html">missing</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/function.html">return</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">field</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/stop.html">stop</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/sQuote.html">sQuote</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">field</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" is read-only"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>,
    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>field <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">field</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/as.function.html">as.function</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/eval.html">eval</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/substitute.html">substitute</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">alist</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> , <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>code <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">code</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
  envir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/environment.html">globalenv</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></code></pre></div>
</div>
<p>This code demands some explanation. The idea is to return a function with the value of <code>field</code> <em>already substituted</em>, not set at runtime. The first step uses <code>substitute</code> to replace the symbol <code>field</code> with the value passed to the function (i.e., the name of the target attribute). The result forms the body of the manufactured function. I have to call <code>substitute</code> <em>again</em> to substitute this expression into the call to <code>alist</code> passed to <code>as.function</code>, because <code>alist</code> quotes its arguments. That expression actually creates the function we need. (See why most people consider me weird for liking metaprogramming?).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">protected</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://r6.r-lib.org/reference/R6Class.html">R6Class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
  classname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example"</span>,
  public <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
    bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, baz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,
    initialize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
  private <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>.foo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>,
  active <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>foo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">accessor_factory</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".foo"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">protected</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 1</code></pre>
</div>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>-- Error in (function (value) : '.foo' is read-only</code></pre>
</div>
</div>
<p>This works. But can we do better?</p>
</section><section id="third-attempt-body-substitution" class="level1"><h1>Third Attempt: Body Substitution</h1>
<p>R features assignment functions to modify all three parts of a closure: formal arguments, body, and environment. We’re interested in creating a set of functions with slightly different bodies, so pairing <code>body&lt;-</code> with <code>substitute</code> is a natural approach. It’s a lot more readable than my last attempt, too. The classic double-substitute trick for substituting the result of an expression comes from Advanced R.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">substitute_body</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">fn</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mapping</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/body.html">body</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">fn</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/eval.html">eval</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/substitute.html">substitute</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/substitute.html">substitute</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">temp</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mapping</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>temp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/body.html">body</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">fn</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">fn</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>

<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">template</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/missing.html">missing</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">value</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/function.html">return</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">field</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/stop.html">stop</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/sQuote.html">sQuote</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">field</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" is read-only"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute_body</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">template</span>, mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>field <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- function (value) 
-- {
--     if (missing(value)) {
--         return(private[["test"]])
--     }
--     else {
--         stop(sQuote("test"), " is read-only")
--     }
-- }</code></pre>
</div>
</div>
<p>Victory! Well, almost. To make this truly useful, we need a wrapper function to create a list of accessors from field names. Thankfully, that’s much easier than figuring out the substitution.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">set_active_fields</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">fields</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">out</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/lapply.html">lapply</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">fields</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">substitute_body</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
      fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">template</span>,
      mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>field <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">out</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/grep.html">gsub</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^\\."</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">fields</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">out</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></code></pre></div>
</div>
<p>A bog-standard use of <code>lapply</code> does the job, with the annoying complication of removing leading dots from the names of private fields.</p>
<p>We can even go one step further and write a wrapper to <code>R6Class</code> to automatically create accessors from a list of private attributes.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">with_accessors</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">classname</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>,
                           <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">public</span>,
                           <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span>,
                           <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inherit</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lock_objects</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,
                           <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">class</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,
                           <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">portable</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lock_class</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>,
                           <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cloneable</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>,
                           <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">parent_env</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/sys.parent.html">parent.frame</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/force.html">force</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">parent_env</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">active</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_active_fields</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/names.html">names</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;"><a href="https://r6.r-lib.org/reference/R6Class.html">R6Class</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>
    classname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">classname</span>, public <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">public</span>,
    private <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, active <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">active</span>,
    inherit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">inherit</span>, lock_objects <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lock_objects</span>,
    class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">class</span>,
    portable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">portable</span>,
    lock_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">lock_class</span>,
    cloneable <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cloneable</span>,
    parent_env <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">parent_env</span>
  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">public</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>initialize <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">.foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/list.html">list</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>.foo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, .bar <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, .baz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">protected</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">with_accessors</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example"</span>, public <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">public</span>, private <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">private</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>

<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">protected</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">new</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>foo <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 1</code></pre>
</div>
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">bar</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 2</code></pre>
</div>
<div class="sourceCode" id="cb28" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">baz</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 3</code></pre>
</div>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>-- Error in (function (value) : '.foo' is read-only</code></pre>
</div>
<div class="sourceCode" id="cb32" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">example</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">baz</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>-- Error in (function (value) : '.baz' is read-only</code></pre>
</div>
</div>
<p>Note that because of the indirection, I have to use <code>&lt;&lt;-</code> in <code>initialize</code>. I also have to make <code>parent_env</code> the execution environment of the wrapper, which is the caller environment of <code>R6Class</code> here. There may also be other nasty surprises buried in this use of reference semantics. Still, this was a fun diversion, and proof of how much power R grants the user over environments and evaluation.</p>


<!-- -->

</section> ]]></description>
  <category>R</category>
  <guid>https://ryan-heslin.github.io/posts/R6-active/index.html</guid>
  <pubDate>Sat, 25 Jun 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>R Tricks I Wish I’d Known as a Beginner</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/lesser-known/index.html</link>
  <description><![CDATA[ <p>R is full of quirks, some of them obscure. Getting the most out of the language takes some experience, but is well worth the effort. These techniques will be old hat to seasoned R users, but you never know: you might still learn something.</p>
<section id="bind-multiple-names-to-the-same-value-at-once" class="level1"><h1>Bind Multiple Names to the Same Value At Once</h1>
<p>The assignment operator <code>&lt;-</code> (like its right- and super-assigning cousins) is actually a function that returns its right-hand side. That means code like:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 5</code></pre>
</div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 5</code></pre>
</div>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 5</code></pre>
</div>
</div>
<p>can be condensed into one line.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/rm.html">rm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/ls.html">ls</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 5</code></pre>
</div>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 5</code></pre>
</div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">z</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 5</code></pre>
</div>
</div>
<p>This does nothing but make your code more readable, but it’s still good to know.</p>
</section><section id="examine-the-source-code-of-functions-wherever-it-hides" class="level1"><h1>Examine the Source Code of Functions, Wherever It Hides</h1>
<p>When the documentation fails to resolve a question, the next step is learning what the function actually does. For closures (which are most R functions), inspecting the source code is as simple as entering the function’s name in the console:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">setNames</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- function (object = nm, nm) 
-- {
--     names(object) &lt;- nm
--     object
-- }
-- &lt;bytecode: 0x55cabe8eca70&gt;
-- &lt;environment: namespace:stats&gt;</code></pre>
</div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">tapply</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- function (X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE) 
-- {
--     FUN &lt;- if (!is.null(FUN)) 
--         match.fun(FUN)
--     if (inherits(INDEX, "formula")) {
--         if (is.data.frame(X)) 
--             INDEX &lt;- .formula2varlist(INDEX, X)
--         else stop("'X' must be a data frame when 'INDEX' is a formula")
--     }
--     if (!is.list(INDEX)) 
--         INDEX &lt;- list(INDEX)
--     INDEX &lt;- lapply(INDEX, as.factor)
--     nI &lt;- length(INDEX)
--     if (!nI) 
--         stop("'INDEX' is of length zero")
--     if (!is.object(X) &amp;&amp; !all(lengths(INDEX) == length(X))) 
--         stop("arguments must have same length")
--     namelist &lt;- lapply(INDEX, levels)
--     extent &lt;- lengths(namelist, use.names = FALSE)
--     cumextent &lt;- cumprod(extent)
--     if (cumextent[nI] &gt; .Machine$integer.max) 
--         stop("total number of levels &gt;= 2^31")
--     storage.mode(cumextent) &lt;- "integer"
--     ngroup &lt;- cumextent[nI]
--     group &lt;- as.integer(INDEX[[1L]])
--     if (nI &gt; 1L) 
--         for (i in 2L:nI) group &lt;- group + cumextent[i - 1L] * 
--             (as.integer(INDEX[[i]]) - 1L)
--     if (is.null(FUN)) 
--         return(group)
--     levels(group) &lt;- as.character(seq_len(ngroup))
--     class(group) &lt;- "factor"
--     ans &lt;- split(X, group)
--     names(ans) &lt;- NULL
--     index &lt;- as.logical(lengths(ans))
--     ans &lt;- lapply(X = ans[index], FUN = FUN, ...)
--     ansmat &lt;- array(if (simplify &amp;&amp; all(lengths(ans) == 1L)) {
--         ans &lt;- unlist(ans, recursive = FALSE, use.names = FALSE)
--         if (!is.null(ans) &amp;&amp; is.na(default) &amp;&amp; is.atomic(ans)) 
--             vector(typeof(ans))
--         else default
--     }
--     else vector("list", prod(extent)), dim = extent, dimnames = namelist)
--     if (length(ans)) {
--         ansmat[index] &lt;- ans
--     }
--     ansmat
-- }
-- &lt;bytecode: 0x55cabbbcee50&gt;
-- &lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<p>In my experience, beginners often don’t think to do this, perhaps because they don’t grasp that functions are first-class objects that can be interacted with.</p>
<p>We have to do a little more work if the function in question is actually an S3 generic, or is not exported from the package it belongs to. In the first case, we can use the fact that S3 methods are generally named <code>genericname.classname</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">print.data.frame</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- function (x, ..., digits = NULL, quote = FALSE, right = TRUE, 
--     row.names = TRUE, max = NULL) 
-- {
--     n &lt;- length(row.names(x))
--     if (length(x) == 0L) {
--         cat(sprintf(ngettext(n, "data frame with 0 columns and %d row", 
--             "data frame with 0 columns and %d rows"), n), "\n", 
--             sep = "")
--     }
--     else if (n == 0L) {
--         print.default(names(x), quote = FALSE)
--         cat(gettext("&lt;0 rows&gt; (or 0-length row.names)\n"))
--     }
--     else {
--         if (is.null(max)) 
--             max &lt;- getOption("max.print", 99999L)
--         if (!is.finite(max)) 
--             stop("invalid 'max' / getOption(\"max.print\"): ", 
--                 max)
--         omit &lt;- (n0 &lt;- max%/%length(x)) &lt; n
--         m &lt;- as.matrix(format.data.frame(if (omit) 
--             x[seq_len(n0), , drop = FALSE]
--         else x, digits = digits, na.encode = FALSE))
--         if (!isTRUE(row.names)) 
--             dimnames(m)[[1L]] &lt;- if (isFALSE(row.names)) 
--                 rep.int("", if (omit) 
--                   n0
--                 else n)
--             else row.names
--         print(m, ..., quote = quote, right = right, max = max)
--         if (omit) 
--             cat(" [ reached 'max' / getOption(\"max.print\") -- omitted", 
--                 n - n0, "rows ]\n")
--     }
--     invisible(x)
-- }
-- &lt;bytecode: 0x55cabb695960&gt;
-- &lt;environment: namespace:base&gt;</code></pre>
</div>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mean.default</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- function (x, trim = 0, na.rm = FALSE, ...) 
-- {
--     if (!is.numeric(x) &amp;&amp; !is.complex(x) &amp;&amp; !is.logical(x)) {
--         warning("argument is not numeric or logical: returning NA")
--         return(NA_real_)
--     }
--     if (isTRUE(na.rm)) 
--         x &lt;- x[!is.na(x)]
--     if (!is.numeric(trim) || length(trim) != 1L) 
--         stop("'trim' must be numeric of length one")
--     n &lt;- length(x)
--     if (trim &gt; 0 &amp;&amp; n) {
--         if (is.complex(x)) 
--             stop("trimmed means are not defined for complex data")
--         if (anyNA(x)) 
--             return(NA_real_)
--         if (trim &gt;= 0.5) 
--             return(stats::median(x, na.rm = FALSE))
--         lo &lt;- floor(n * trim) + 1
--         hi &lt;- n + 1 - lo
--         x &lt;- sort.int(x, partial = unique(c(lo, hi)))[lo:hi]
--     }
--     .Internal(mean(x))
-- }
-- &lt;bytecode: 0x55cabb555f78&gt;
-- &lt;environment: namespace:base&gt;</code></pre>
</div>
</div>
<p>In the second case, we can use the <code>:::</code> function, <code>::</code>’s nosier cousin, to access a non-exported object:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tidyselect</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:::</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://tidyselect.r-lib.org/reference/where.html">where</a></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- function (fn) 
-- {
--     predicate &lt;- as_function(fn)
--     call &lt;- current_call()
--     function(x, ...) {
--         out &lt;- predicate(x, ...)
--         check_predicate_output(out, call = call)
--         out
--     }
-- }
-- &lt;bytecode: 0x55cabddcec40&gt;
-- &lt;environment: namespace:tidyselect&gt;</code></pre>
</div>
</div>
<p>It’s seldom a good idea to <em>use</em> non-exported functions, because they probably weren’t exported for a reason!</p>
<p>Of course, for primitives and certain special functions, the source code isn’t in R to begin with:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sum</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- function (..., na.rm = FALSE)  .Primitive("sum")</code></pre>
</div>
</div>
<p>To understand how those work, you’ll have to find the appropriate file in the R source code and read the C code.</p>
</section><section id="automatically-trigger-postmortem-debugging" class="level1"><h1>Automatically Trigger Postmortem Debugging</h1>
<p>When a function misbehaves, the standard advice is to call <code>debug</code> on it and run the problematic call. That will enter the browser in the first line of the function, allowing you to (hoperfully) step through and track down the error.</p>
<p>But this can be automated. The <code>error</code> option allows you to set an error handler - a function that is called whenever R experiences an error. If you run</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/options.html">options</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">utils</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">::</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/utils/recover.html">recover</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
</div>
<p>then R will trigger the debugger whenever it encounters an error (so long as it’s an interactive session). That will allow you to inspect the state of the function that caused the error right before it occurred, and any other frames on the call stack at that moment. R’s error messages are often inscrutable, so this technique is quite powerful.</p>
<p>Here’s what it looks like in practice. Try running this line yourself and see if you can pinpoint the subtle problem with it (though you can also guess it from <code>ave</code>’s signature).</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb26" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/ave.html">ave</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mpg</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">vs</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mean</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>-- Error in unique.default(x, nmax = nmax): unique() applies only to vectors</code></pre>
</div>
</div>
<p>The traceback hints that the problem lies with the <code>...</code>, and inspecting the stack frames should be enough to track it down.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r source code-with-copy"><code class="sourceCode r"><span id="cb28-1">Error <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique.default</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nmax =</span> nmax) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb28-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>() applies only to vectors</span>
<span id="cb28-3"></span>
<span id="cb28-4">Enter a frame number, or <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> to exit</span>
<span id="cb28-5"></span>
<span id="cb28-6"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ave</span>(mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>mpg, mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vs, mean)</span>
<span id="cb28-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interaction</span>(...)</span>
<span id="cb28-8"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.factor</span>(args[[i]])</span>
<span id="cb28-9"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">factor</span>(x)</span>
<span id="cb28-10"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nmax =</span> nmax)</span>
<span id="cb28-11"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unique.default</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nmax =</span> nmax)</span>
<span id="cb28-12"></span>
<span id="cb28-13">Selection<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span></span></code></pre></div>
</div>
<p>Of course, this can become annoying when it happens for a trivial error like</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb29" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/lm.html">lm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mpg</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">cyll</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span>, data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>-- Error in eval(predvars, data, env): object 'cyll' not found</code></pre>
</div>
</div>
<p>but in that case, you can simply set .</p>
<section id="get-the-expressions-passed-as-function-arguments" class="level2"><h2 class="anchored" data-anchor-id="get-the-expressions-passed-as-function-arguments">Get the Expressions Passed as Function Arguments</h2>
<p>R passes function arguments by value, not by reference, yet it’s possible to recover the symbol or expression passed to a function using this trick:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb31" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">f</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/deparse.html">deparse</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/substitute.html">substitute</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/print.html">print</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">`I'm a symbol!`</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] "I'm a symbol!"</code></pre>
</div>
</div>
<p><code>substitute</code>, when called in a function, replaces its argument with the expression in the promise corresponding to that argument. (Promises are internal objects that implement function arguments). <code>deparse</code> converts that unevaluated R code into a character vector.</p>
<p>This could be used to make a function that automatically labels plot axes:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb33" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">descriptive_plot</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x_name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/deparse.html">deparse</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/substitute.html">substitute</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y_name</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/deparse.html">deparse</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/substitute.html">substitute</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/graphics/plot.default.html">plot</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y</span>, xlab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x_name</span>, ylab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">y_name</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">weight</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">wt</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mpg</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mpg</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">descriptive_plot</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mpg</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">weight</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure"><p><img src="https://ryan-heslin.github.io/posts/lesser-known/index_files/figure-html/unnamed-chunk-24-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>What are your favorite R tricks?</p>


<!-- -->

</section></section> ]]></description>
  <category>R</category>
  <guid>https://ryan-heslin.github.io/posts/lesser-known/index.html</guid>
  <pubDate>Sat, 18 Jun 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Ghost in the Machine: The Remnant of R’s Past That Haunts it Still</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/ghost-machine/index.html</link>
  <description><![CDATA[ <p>As programming languages go, R isn’t particularly old: its first public release came in early 2000 (see <a href="https://www.stat.auckland.ac.nz/~ihaka/downloads/Massey.pdf">https://www.stat.auckland.ac.nz/~ihaka/downloads/Massey.pdf</a> for more details).</p>
<p>But as many users know, its roots go back further. R was developed from the language S, created in the 1970s by a team led by John Chambers at Bell Labs. Those were the glory days of Bell Labs, when the language C and the Unix ecosystem were developed. Like a modern palace built on the foundations of an ancient one, R bears many traces of its lineage. Syntax is very similar, many features are backward-compatible, and the documentation for some functions even refers to resources about S rather than R. (Try <code><a href="https://rdrr.io/r/base/sum.html">?sum</a></code>, for one example).</p>
(I can’t help but pause here to relay the account the linked presentation gives of R’s origins. It all began with this hallway conversation between Ross Ihaka and Robert Gentleman in the University of Auckland around 1990):
<blockquote cite="https://www.stat.auckland.ac.nz/~ihaka/downloads/Massey.pdf" class="blockquote">
<p>Gentleman: “Let’s write some software.”</p>
Ihaka: “Sure, that sounds like fun.”
</blockquote>
<p>One of those traces, harder to observe but certainly still present, is also one of R’s most unusual (and, in some quarters, derided) features: an emphasis on convenience in interactive use. Interpreted languages typically support interactivity in some way, since the ability to run a snippet of code and instantly get results is one of their greatest advantages over compiled languages. But S was designed primarily for interactive data exploration, and R has retained that capability as a design focus. In areas great and small, from core design choices to implementation quirks, R makes it as easy as possible to bang out code in the console and see what happens. That makes it a fast, flexible tool for exploring data and following hunches. It also strews mines in the path of anyone programming in the language without detailed knowledge of the its nuances.</p>
<p>A few examples will make this painfully clear.</p>
<section id="partial-matching-complete-headache" class="level1"><h1>Partial Matching, Complete Headache</h1>
<p>Can you spot the problem with this call? It runs correctly:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/rep.html">rep</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>--  [1] 1 2 3 1 2 3 1 2 3 1</code></pre>
</div>
</div>
<p>but is missing something. The relevant argument of <code>rep</code> is actually called <code>length.out</code>, not <code>length</code>, but R’s partial argument matching saves us, since <code>length</code> is a shortened form of <code>length.out</code>.</p>
<p>This is nice to have when typing code in the console. But relying on partial argument matching in scripts is a <em>very</em> bad idea.</p>
<p>Suppose you’re working with a package that includes some functions with annoyingly long argument names. All that typing is annoying, so you decide you may as well save some keystrokes:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xyzabc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">abcxyz</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/Normal.html">rnorm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xyzabc</span>, sd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">abcxyz</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>abc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>--   [1] -3.832296480 -0.179907839  2.698853710
--   [4]  2.202720383 -0.097936622  0.374811390
--   [7] -1.660487975 -0.443902964  3.984329121
--  [10]  0.818209341  4.724355302  0.889974211
--  [13] -4.325139501 -0.210652633 -1.965775590
--  [16] -2.093254164 -1.699018790  2.471692815
--  [19] -1.957566194  1.009314461 -0.367102051
--  [22] -1.190359431 -2.736869419  1.318208535
--  [25] -1.300926002 -1.167698420 -0.144756120
--  [28]  0.387435634  0.123298024 -3.199073181
--  [31]  3.911277987  0.008864051  1.592725428
--  [34]  1.129760906 -3.711261843 -2.106417550
--  [37] -0.072241069 -3.316152569  1.771609641
--  [40] -2.424137347 -0.172373913 -2.360622588
--  [43]  0.627420237 -1.983857054  2.889086402
--  [46] -1.931104154  0.079474449  3.740687515
--  [49] -1.735703490 -2.741545685  3.120845428
--  [52] -3.018826030  3.451837004 -0.416154726
--  [55]  0.799195399 -1.247520532  2.482702338
--  [58] -0.223692249 -3.496364331  0.132376773
--  [61] -0.837665794 -0.789389163  1.736553142
--  [64] -0.667260378 -2.266502444 -1.784953609
--  [67] -1.434062615  0.300901111 -3.573790554
--  [70]  1.335967425  1.015596252 -1.043496547
--  [73]  1.836141854  1.101557641 -0.371347023
--  [76]  2.730841905  0.646280215  0.562710895
--  [79] -1.588997459 -4.859266182  1.553243207
--  [82] -0.952210592 -0.139839888 -0.672061577
--  [85] -1.443710025  1.439907554 -2.141684843
--  [88] -0.060812462  3.516872391 -1.872630789
--  [91] -1.964365273  4.032826192  1.588681648
--  [94] -0.193691391  0.018819452 -2.073896904
--  [97] -0.444350180  0.829332787  2.198661880
-- [100]  2.632576496</code></pre>
</div>
</div>
<p>All seems well. But then a version update adds a new argument:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">abcabc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xyzabc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">abcxyz</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/Normal.html">rnorm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">abcabc</span>, mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xyzabc</span>, sd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">abcxyz</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>abc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>-- Error in foo(abc = 2): argument 1 matches multiple formal arguments</code></pre>
</div>
</div>
<p>R throws an error, unable to find an unambiguous match. (Imagine how painful this would be to debug if R defaulted to the first match instead). The way to avoid this scenario is simple: never rely on partial argument matching in permanent code. Nonetheless, many packages do. You can identify offenders yourself by setting the <code>warnPartialMatchArgs</code> option:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/options.html">options</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>warnPartialMatchArgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">foo</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xyzabc</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">abcxyz</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/Normal.html">rnorm</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">xyzabc</span>, sd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">abcxyz</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">foo</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>abc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>-- Warning in foo(abc = 2): partial argument match of
-- 'abc' to 'abcxyz'</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>--   [1]  2.056992575  1.322844251 -3.458290652
--   [4] -5.170712894 -1.476216057  0.050071317
--   [7]  2.516961218 -0.617924961 -0.645145736
--  [10] -1.707157141 -0.496154356  2.887369103
--  [13]  1.236866664 -0.876824343 -0.391118224
--  [16]  1.826571827 -5.440979298  0.659228988
--  [19]  3.415584922  0.374500579 -2.563966421
--  [22]  4.254911951 -0.619536020  3.318616333
--  [25] -2.325602723 -2.583259426  1.712151786
--  [28]  2.388929093  1.001335622 -1.119142941
--  [31] -4.670136682 -0.322095908  1.478196768
--  [34] -0.591391782 -3.146242860  2.513434645
--  [37] -0.402846310 -0.891570739  1.289052811
--  [40]  2.002325219 -1.066705456 -1.524996095
--  [43]  0.834603762 -3.203128834  0.759495906
--  [46]  0.716355454 -2.412830027  0.809742218
--  [49] -1.453698629  3.615541516 -1.235485869
--  [52]  0.393188156 -3.741051217 -3.498299092
--  [55] -2.235396115  2.584235005 -0.772937413
--  [58]  2.950040753  1.582295378  0.328534300
--  [61] -1.181303955 -1.489422829 -0.100240455
--  [64] -1.560364356 -0.239825305  0.890631360
--  [67]  0.090850996 -2.457568148  0.601452793
--  [70] -1.068849255 -0.085391919  0.485019667
--  [73]  1.185029108 -0.168771064 -1.007527210
--  [76] -1.143752440  1.286196778  0.157290090
--  [79]  1.957851928  3.590772166  1.017623248
--  [82] -1.146824065  1.866300905 -1.256454048
--  [85] -0.005862076  1.167224212  1.031932994
--  [88]  2.188625734 -0.559895730  4.307325357
--  [91]  4.320682792 -2.209743535 -2.756925531
--  [94]  1.773104939 -0.115888431 -0.499389409
--  [97] -1.514979921 -0.743557980  1.535379695
-- [100]  4.852395904</code></pre>
</div>
</div>
</section><section id="when-simplification-complicates" class="level1"><h1>When Simplification Complicates</h1>
<p>R is an example of a weakly typed language with dynamic typing. That means data types are known only at runtime, not before, and that the language will try to coerce disparate types to a common type instead of throwing an error. That means the interpreter will happily run code like</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/paste.html">paste</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>--  [1] "c(21, 21, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8, 16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4, 30.4, 33.9, 21.5, 15.5, 15.2, 13.3, 19.2, 27.3, 26, 30.4, 15.8, 19.7, 15, 21.4) 1"                    
--  [2] "c(6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8, 8, 8, 8, 4, 4, 4, 8, 6, 8, 4) 1"                                                                                                            
--  [3] "c(160, 160, 108, 258, 360, 225, 360, 146.7, 140.8, 167.6, 167.6, 275.8, 275.8, 275.8, 472, 460, 440, 78.7, 75.7, 71.1, 120.1, 318, 304, 350, 400, 79, 120.3, 95.1, 351, 145, 301, 121) 1"                       
--  [4] "c(110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150, 150, 245, 175, 66, 91, 113, 264, 175, 335, 109) 1"                                                     
--  [5] "c(3.9, 3.9, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92, 3.07, 3.07, 3.07, 2.93, 3, 3.23, 4.08, 4.93, 4.22, 3.7, 2.76, 3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11) 1"                  
--  [6] "c(2.62, 2.875, 2.32, 3.215, 3.44, 3.46, 3.57, 3.19, 3.15, 3.44, 3.44, 4.07, 3.73, 3.78, 5.25, 5.424, 5.345, 2.2, 1.615, 1.835, 2.465, 3.52, 3.435, 3.84, 3.845, 1.935, 2.14, 1.513, 3.17, 2.77, 3.57, 2.78) 1"  
--  [7] "c(16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20, 22.9, 18.3, 18.9, 17.4, 17.6, 18, 17.98, 17.82, 17.42, 19.47, 18.52, 19.9, 20.01, 16.87, 17.3, 15.41, 17.05, 18.9, 16.7, 16.9, 14.5, 15.5, 14.6, 18.6) 1"
--  [8] "c(0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1) 1"                                                                                                            
--  [9] "c(1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1) 1"                                                                                                            
-- [10] "c(4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 4) 1"                                                                                                            
-- [11] "c(4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2, 2, 4, 2, 1, 2, 2, 4, 6, 8, 2) 1"</code></pre>
</div>
</div>
<p><code>paste</code> just coerces everything to character, no matter how ludicrous the results. This behavior can trip you up, but it’s not truly insidious.</p>
<p>Unfortunately, R sometimes changes types under your nose. Suppose we write a function, <code>subset2</code>. It takes as argument a data frame, and two functions that take a data frame as argument. It filters the data column-wise using <code>col_f</code>, then rowwise using <code>row_f</code>.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">subset2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">col_f</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">row_f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span>, \<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colSums.html">colSums</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, \<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colSums.html">rowSums</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output-display">

<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":[""],"name":["_rn_"],"type":[""],"align":["left"]},{"label":["mpg"],"name":[1],"type":["dbl"],"align":["right"]},{"label":["disp"],"name":[2],"type":["dbl"],"align":["right"]},{"label":["hp"],"name":[3],"type":["dbl"],"align":["right"]},{"label":["qsec"],"name":[4],"type":["dbl"],"align":["right"]}],"data":[{"1":"18.7","2":"360","3":"175","4":"17.02","_rn_":"Hornet Sportabout"},{"1":"14.3","2":"360","3":"245","4":"15.84","_rn_":"Duster 360"},{"1":"10.4","2":"472","3":"205","4":"17.98","_rn_":"Cadillac Fleetwood"},{"1":"10.4","2":"460","3":"215","4":"17.82","_rn_":"Lincoln Continental"},{"1":"14.7","2":"440","3":"230","4":"17.42","_rn_":"Chrysler Imperial"},{"1":"15.5","2":"318","3":"150","4":"16.87","_rn_":"Dodge Challenger"},{"1":"13.3","2":"350","3":"245","4":"15.41","_rn_":"Camaro Z28"},{"1":"19.2","2":"400","3":"175","4":"17.05","_rn_":"Pontiac Firebird"},{"1":"15.8","2":"351","3":"264","4":"14.50","_rn_":"Ford Pantera L"},{"1":"15.0","2":"301","3":"335","4":"14.60","_rn_":"Maserati Bora"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p>That seems to work. (Deadly words!) But what if my finger had slipped when I typed <code>500</code>?</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">subset2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">col_f</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">row_f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">row_f</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span>, \<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colSums.html">colSums</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, \<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colSums.html">rowSums</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>-- Error in xj[i]: invalid subscript type 'closure'</code></pre>
</div>
</div>
<p>What happened? Only one column of <code>mtcars</code>, <code>disp</code>, has a column sum greater than 5000. And what happens if you select a single column with array-style indexing?</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"disp"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>--  [1] 160.0 160.0 108.0 258.0 360.0 225.0 360.0
--  [8] 146.7 140.8 167.6 167.6 275.8 275.8 275.8
-- [15] 472.0 460.0 440.0  78.7  75.7  71.1 120.1
-- [22] 318.0 304.0 350.0 400.0  79.0 120.3  95.1
-- [29] 351.0 145.0 301.0 121.0</code></pre>
</div>
</div>
<p>R helpfully simplifies to an atomic vector. We can fix our function by disabling this behavior:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">subset3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">col_f</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">row_f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">col_f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, drop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>
  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">row_f</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">df</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>
<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span>
<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">subset3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span>, \<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colSums.html">colSums</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, \<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/colSums.html">rowSums</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- numeric(0)</code></pre>
</div>
</div>
<p>or, even more sensibly, using list subsetting (single brackets, no comma), which never simplifies.</p>
<p>This behavior isn’t indefensible. It’s consistent with how subsetting works on arrays (which are usually atomic vectors). In interactive use, it’s convenient, since then you’re usually interested in the data a column contains, not the object containing it. But automatic simplification is easily missed and potentially destructive, and the way to avoid it can be found only if you carefully read the documentation.</p>
</section><section id="brevity-is-the-soul-of-bugs" class="level1"><h1>Brevity is the Soul of Bugs</h1>
<p>Suppose you have the following vector:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/c.html">c</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
</div>
<p>R is strict about missing values, but not about logical constants. <code>T</code> and <code>F</code> can be used as abbreviations for <code>TRUE</code> and <code>FALSE</code>, respectively. The following is a valid way of taking the mean:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/mean.html">mean</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, na.rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">T</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] 0.75</code></pre>
</div>
</div>
<p>Likewise, with <code>F</code> for <code>FALSE</code>:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">mtcars</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>, drop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">F</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></code></pre></div>
<div class="cell-output-display">

<div data-pagedtable="false">
  <script data-pagedtable-source="" type="application/json">
{"columns":[{"label":[""],"name":["_rn_"],"type":[""],"align":["left"]},{"label":["cyl"],"name":[1],"type":["dbl"],"align":["right"]}],"data":[{"1":"6","_rn_":"Mazda RX4"},{"1":"6","_rn_":"Mazda RX4 Wag"},{"1":"4","_rn_":"Datsun 710"},{"1":"6","_rn_":"Hornet 4 Drive"},{"1":"8","_rn_":"Hornet Sportabout"}],"options":{"columns":{"min":{},"max":[10]},"rows":{"min":[10],"max":[10]},"pages":{}}}
  </script>
</div>
</div>
</div>
<p>What’s the harm in this? While <code>TRUE</code> and <code>FALSE</code> are reserved words, the abbreviations <em>aren’t</em>. Let’s say your colleague creates a variable <code>T</code>, making sure to use uppercase to avoid masking the <code>t</code> function:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">T</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/stats/TDist.html">pt</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
</div>
<p>This code now fails in a confusing way:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode" id="cb24" style="background: #f1f3f5;"><pre class="downlit sourceCode r code-with-copy"><code class="sourceCode R"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"><a href="https://rdrr.io/r/base/mean.html">mean</a></span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">x</span>, na.rm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">T</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre class="output"><code>-- [1] NA</code></pre>
</div>
</div>
<p>The reason for this feature, as before, is clear: it’s convenient in interactive use. The problem with it is equally clear: it’s suicidal in programmatic use.</p>
</section><section id="conclusion" class="level1"><h1>Conclusion</h1>
<p>The theme here is obvious: features that save a few keystrokes in interactive use can cause maddening bugs if carelessly used in production code. You need familiarity with the language and some degree of vigilance to avoid the pitfalls, and everyone slips now and again.</p>
<p>The longer I’ve spent with R, the more convinced I’ve become that R has outgrown these features. R was designed as an environment for interactive data exploration, statistical testing, and graphical displays, but today it can do so much more: serve Web apps, query remote databases, render just about any document (even this one) with Rmarkdown or Quarto, and many other uses. But to fulfill these sophisticated use cases, you have to carefully avoid traps like the ones discussed here. Some organizations have no doubt avoided the problem by switching to Python. So R’s design emphasis on interactivity may limit its growth.</p>
<p>Moreover, the benefits these features deliver are scant. The three behaviors I describe - partial argument matching, logical abbreviations, and <code>drop = FALSE</code> save a bit of typing (or, in the last case, an extra step of data manipulation). A few key strokes saved here and there adds up quickly, and the savings may have been significant in the days when users were limited to R’s basic <code>readline</code> prompt. But that doesn’t balance the potential harm they can cause in production code today, especially when modern IDEs (and Vim or Emacs, of course) support autocompletion, obviating the need for abbreviated code.</p>
<p>Don’t get me wrong. R remains a powerful, expressive language built on solid design principles. It’s my first choice for any kind of data manipulation, and I still find it fun and satisfying to use. But some of its behaviors are more at home in its past than its future.</p>


<!-- -->

</section> ]]></description>
  <category>R</category>
  <guid>https://ryan-heslin.github.io/posts/ghost-machine/index.html</guid>
  <pubDate>Sun, 12 Jun 2022 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Hello, world!</title>
  <dc:creator>Ryan Heslin</dc:creator>
  <link>https://ryan-heslin.github.io/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>Welcome to my new blog! My name is Ryan Heslin, and I’ve just graduated with a master’s degree in data science from American University. As I do for most of my side projects, I’ve defined goals for this one. Naturally, I’ve made those goals sound <em>just</em> compelling enough that I can plausibly deny that working on this thing is procrastination.</p>
<p>Those goals are:</p>
<ol type="1">
<li>Engage with the wider R community.</li>
<li>Share some of the R esoterica I’ve learned</li>
<li>Learn a web framework, as a first step toward more sophisticated web design</li>
<li>Practice writing, which I find satisfies me the same way coding does</li>
</ol>
<p>I plan to mostly write about R and other data science topics, though I might broaden scope later on. If you’ve found your way here, I hope at least you’re entertained for a little while.</p>


<!-- -->


 ]]></description>
  <category>news</category>
  <guid>https://ryan-heslin.github.io/posts/welcome/index.html</guid>
  <pubDate>Fri, 27 May 2022 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
